{
  "address": "0xDeeedea502aB2E3B08293b822a281ac46b2E1d8C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Configuration",
          "name": "_config",
          "type": "address"
        },
        {
          "internalType": "contract PresaleManager",
          "name": "_manager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "beforeSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getTradeFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_quoter",
          "type": "address"
        }
      ],
      "name": "putQuoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x311d254f8b89458f7a332db23837faac57d1010b0d293c1e944d6d10a19b75f5",
  "receipt": {
    "to": null,
    "from": "0xa5B5bE1ecB74696eC27E3CA89E5d940c9dbcCc56",
    "contractAddress": "0xDeeedea502aB2E3B08293b822a281ac46b2E1d8C",
    "transactionIndex": 2,
    "gasUsed": "547591",
    "logsBloom": "0x
    "blockHash": "0xacd918c40306d1744fe36b91e567b9106c4d80d14c7cdcc05857ddf96ae47f27",
    "transactionHash": "0x311d254f8b89458f7a332db23837faac57d1010b0d293c1e944d6d10a19b75f5",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 15765159,
        "transactionHash": "0x311d254f8b89458f7a332db23837faac57d1010b0d293c1e944d6d10a19b75f5",
        "address": "0x0000000000000000000000000000000000007005",
        "topics": [
          "0x33c981baba081f8fd2c52ac6ad1ea95b6814b4376640f55689051f6584729688",
          "0x000000000000000000000000a5b5be1ecb74696ec27e3ca89e5d940c9dbccc56"
        ],
        "data": "0x000000000000000000000000deeedea502ab2e3b08293b822a281ac46b2e1d8c",
        "logIndex": 9,
        "blockHash": "0xacd918c40306d1744fe36b91e567b9106c4d80d14c7cdcc05857ddf96ae47f27"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 15765159,
        "transactionHash": "0x311d254f8b89458f7a332db23837faac57d1010b0d293c1e944d6d10a19b75f5",
        "address": "0xDeeedea502aB2E3B08293b822a281ac46b2E1d8C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a5b5be1ecb74696ec27e3ca89e5d940c9dbccc56"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xacd918c40306d1744fe36b91e567b9106c4d80d14c7cdcc05857ddf96ae47f27"
      }
    ],
    "blockNumber": 15765159,
    "cumulativeGasUsed": "693884",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0A35915c7b0cb0f7f33916eEfcC039f0A9bDa0C3",
    "0x8D3b7493C7d033BB44F50268f855B77AD0028DA9"
  ],
  "numDeployments": 6,
  "solcInputHash": "81a7f8e4659dc6e0805a7ecc396f18f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Configuration\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"contract PresaleManager\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"beforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getTradeFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quoter\",\"type\":\"address\"}],\"name\":\"putQuoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PresalePoolManager.sol\":\"PresalePoolManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@kayen/token/contracts/IBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0;\\n\\ninterface IBlacklist {\\n    function isTransferBlacklisted(address target) external view returns (bool);\\n}\",\"keccak256\":\"0xc1d2c827b4b6417be6e296a6ac760b199e9ec78dd1197f86e0f4f11a7922938f\",\"license\":\"GPL-3.0\"},\"@kayen/uniswap-v3-core/contracts/interfaces/IPoolConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\ninterface IPoolConfiguration {\\n    function getTradeFee(address token0, address token1) external view returns (uint24);\\n    function getFeeVault() external view returns (address);\\n    function beforeSwap(address pool, address recipient) external;\\n}\",\"keccak256\":\"0xf2c9a82116f922eca20ee96e08dbe7a763babf0ed9d1daae10607451e342817c\",\"license\":\"GPL-2.0-or-later\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@kayen/token/contracts/IBlacklist.sol\\\";\\n\\ncontract Configuration is Ownable, IBlacklist {\\n    mapping(address => bool) public paymentTokenWhitlist;\\n    mapping(address => bool) public distributorWhitelist;\\n    mapping(address => bool) public presaleMakers;\\n    mapping(address => bool) public isPoolPaused;\\n    mapping(address => bool) public transferBlacklist;\\n    bool public isAllPoolPaused;\\n\\n    address public feeVault;\\n\\n    uint24 public defaultDistributionFeeRate = 1e6 / 100; // 0.01 = 1%\\n    mapping(address => uint24) public distributionFeeRate;\\n\\n    // amount of payment token as minting fee\\n    uint256 public mintingFee = 0;\\n\\n    uint24 public defaultTradeFee = 1e6 / 100; // 0.01 = 1%\\n    mapping(address => uint24) public tradeFee;\\n\\n    uint24 public maxTreasuryRate = 8e5; // 80%\\n\\n    constructor(address _feeVault) {\\n        feeVault = _feeVault;\\n    }\\n\\n    function putPresaleMaker(address presaleMaker) external onlyOwner {\\n        presaleMakers[presaleMaker] = true;\\n    }\\n\\n    function removePresaleMaker(address presaleMaker) external onlyOwner {\\n        presaleMakers[presaleMaker] = false;\\n    }\\n\\n    function allowTokenForPayment(address token) external onlyOwner {\\n        paymentTokenWhitlist[token] = true;\\n    }\\n\\n    function disallowTokenForPayment(address token) external onlyOwner {\\n        paymentTokenWhitlist[token] = false;\\n    }\\n\\n    function allowDistributor(address distributor) external onlyOwner {\\n        distributorWhitelist[distributor] = true;\\n    }\\n\\n    function disallowDistributor(address distributor) external onlyOwner {\\n        distributorWhitelist[distributor] = false;\\n    }\\n\\n    function isDistributorWhitelisted(address distributor) external view returns (bool) {\\n        return distributorWhitelist[distributor];\\n    }\\n\\n    function putDefaultDistributionFeeRate(uint24 feeRate) external onlyOwner {\\n        defaultDistributionFeeRate = feeRate;\\n    }\\n\\n    function putDistributionFeeRateForToken(address token, uint24 feeRate) external onlyOwner {\\n        distributionFeeRate[token] = feeRate;\\n    }\\n\\n    function getDistributionFeeRate(address token0, address token1) external view returns (uint24) {\\n        uint24 fee0 = distributionFeeRate[token0];\\n        uint24 fee1 = distributionFeeRate[token1];\\n        if(fee0 == 0 && fee1 == 0) {\\n            return defaultDistributionFeeRate;\\n        }\\n        return fee0 > fee1 ? fee0 : fee1;\\n    }\\n\\n    function putFeeVault(address vault) external onlyOwner {\\n        require(vault != address(0), \\\"Configuration: fee vault cannot be zero address\\\");\\n        feeVault = vault;\\n    }\\n\\n    function getFeeVault() external view returns (address) {\\n        return feeVault;\\n    }\\n\\n    function isPaused(address pool) external view returns (bool) {\\n        return isPoolPaused[pool] || isPausedAll();\\n    }\\n\\n    function isPausedAll() public view returns (bool) {\\n        return isAllPoolPaused;\\n    }\\n\\n    function pause(address pool) external onlyOwner {\\n        isPoolPaused[pool] = true;\\n    }\\n\\n    function unpause(address pool) external onlyOwner {\\n        isPoolPaused[pool] = false;\\n    }\\n\\n    function pauseAll() external onlyOwner {\\n        isAllPoolPaused = true;\\n    }\\n\\n    function unpauseAll() external onlyOwner {\\n        isAllPoolPaused = false;\\n    }\\n\\n    function putMintingFee(uint256 fee) external onlyOwner {\\n        mintingFee = fee;\\n    }\\n    \\n    function putDefaultTradeFee(uint24 _tradeFee) external onlyOwner {\\n        assertTradeFee(_tradeFee);\\n        defaultTradeFee = _tradeFee;\\n    }\\n\\n    function putTradeFeeForToken(address token, uint24 _tradeFee) external onlyOwner {\\n        assertTradeFee(_tradeFee);\\n        tradeFee[token] = _tradeFee;\\n    }\\n\\n    function getTradeFee(address token0, address token1) external view returns (uint24) {\\n        uint24 fee0 = tradeFee[token0];\\n        uint24 fee1 = tradeFee[token1];\\n        if(fee0 == 0 && fee1 == 0) {\\n            return defaultTradeFee;\\n        }\\n        return fee0 > fee1 ? fee0 : fee1;\\n    }\\n\\n    function putMaxTreasuryRate(uint24 rate) external onlyOwner {\\n        require(rate <= 1e6, \\\"Configuration: max treasury rate must be less than 1e6\\\");\\n        maxTreasuryRate = rate;\\n    }\\n\\n    function getMaxTreasuryRate() external view returns (uint24) {\\n        return maxTreasuryRate;\\n    }\\n\\n    function assertTradeFee(uint24 _tradeFee) internal view {\\n        // max 2%\\n        require(_tradeFee <= 1e6 / 50, \\\"Configuration: trade fee must be less than 1%\\\");\\n    }\\n\\n    function assertDistributeFee(uint24 _tradeFee) internal view {\\n        // max 2%\\n        require(_tradeFee <= 1e6 / 50, \\\"Configuration: trade fee must be less than 1%\\\");\\n    }\\n\\n    function putTransferBlacklist(address target) external onlyOwner {\\n        transferBlacklist[target] = true;\\n    }\\n\\n    function removeTransferBlacklist(address target) external onlyOwner {\\n        transferBlacklist[target] = false;\\n    }\\n\\n    function isTransferBlacklisted(address target) external view returns (bool) {\\n        return transferBlacklist[target];\\n    }\\n\\n}\",\"keccak256\":\"0xf9ba091eb371665401ec2c10759b57a4ebafdc9c2ea9f5d08813c28f1a910dde\",\"license\":\"GPL-3.0\"},\"contracts/PresalePoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\nimport { Configuration } from \\\"./Configuration.sol\\\";\\nimport { PresaleManager } from \\\"./presale-manager/PresaleManager.sol\\\";\\nimport { IPoolConfiguration } from \\\"@kayen/uniswap-v3-core/contracts/interfaces/IPoolConfiguration.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PresalePoolManager is IPoolConfiguration, Ownable {\\n    Configuration config;\\n    PresaleManager manager;\\n    address quoter;\\n\\n    constructor(Configuration _config, PresaleManager _manager) Ownable() {\\n        config = _config;\\n        manager = _manager;\\n    }\\n\\n    function getTradeFee(address token0, address token1) external view returns (uint24) {\\n        return config.getTradeFee(token0, token1);\\n    }\\n\\n    function getFeeVault() external view returns (address) {\\n        return config.getFeeVault();\\n    }\\n\\n    function beforeSwap(address pool, address recipient) external {\\n        if(recipient != quoter) {\\n            require(!checkIsPaused(pool), \\\"PresalePoolManager: Pool is paused\\\");\\n            require(!manager.isBondingCurveEnd(pool), \\\"PresalePoolManager: Bonding curve end\\\");\\n            require(!checkIsPending(pool), \\\"PresalePoolManager: Pool is pending\\\");\\n        }\\n    }\\n\\n    function putQuoter(address _quoter) external onlyOwner {\\n        quoter = _quoter;\\n    }\\n\\n    function checkIsPending(address pool) private view returns (bool) {\\n        return manager.isPending(pool);\\n    }\\n\\n    function checkIsPaused(address pool) private view returns (bool) {\\n        return config.isPaused(pool);\\n    }\\n\\n\\n}\",\"keccak256\":\"0xeece36f52a693d5d80ee60bba3dcc4edd7ded9da8e5d68f52147ab503b961f33\",\"license\":\"GPL-3.0\"},\"contracts/distributor/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\ninterface IDistributor {\\n    function distribute(address token0, address token1, uint256 expectedPriceZeroToOne, bytes calldata data) external;\\n}\",\"keccak256\":\"0x0404bbc92285419f68613c47ed7efd25e073b022b7973afc117430baae806e57\",\"license\":\"GPL-3.0\"},\"contracts/presale-manager/PresaleManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../presale/IPresale.sol\\\";\\nimport \\\"../Configuration.sol\\\";\\n\\ncontract PresaleManager is Ownable {\\n    mapping(address => bool) public isRegistered;\\n    mapping(address => address) public presales;\\n    mapping(address => address) public presalesByPool;\\n    address[] public allPresales;\\n    Configuration config;\\n\\n    constructor(Configuration _config) Ownable() {\\n        config = _config;\\n    }\\n\\n    function register(IPresale presale) external {\\n        require(config.presaleMakers(msg.sender), \\\"PresaleManager: FORBIDDEN\\\");\\n        (address tokenAddress, string memory name, string memory symbol, uint256 totalSupply) = presale.tokenInfo();\\n        require(!isRegistered[tokenAddress], \\\"PresaleManager: ALREADY_REGISTERED\\\");\\n        IPresale.PresaleInfo memory presaleInfo =  presale.info();\\n        presales[tokenAddress] = address(presale);\\n        isRegistered[tokenAddress] = true;\\n        presalesByPool[presaleInfo.pool] = address(presale);\\n        allPresales.push(address(presale));\\n        emit PresaleCreated(\\n            name,\\n            symbol,\\n            tokenAddress,\\n            presaleInfo.paymentToken,\\n            presaleInfo.pool,\\n            presaleInfo.amountToRaise,\\n            totalSupply,\\n            presaleInfo.amountToSale,\\n            presaleInfo.data\\n        );\\n    }\\n\\n    function isPending(address target) external view returns (bool) {\\n        IPresale presale = getPresale(target);\\n        return presale.info().startTimestamp > block.timestamp;\\n    }\\n\\n    function getPresale(address target) public view returns (IPresale) {\\n        if(address(presales[target]) == address(0)) {\\n            return IPresale(presalesByPool[target]);\\n        }\\n        return IPresale(presales[target]);\\n    }\\n\\n    function getProgress(address target) public view returns (uint256) {\\n        return getPresale(target).getProgress();\\n    }\\n\\n    function isBondingCurveEnd(address target) public view returns (bool) {\\n        return getPresale(target).isBondingCurveEnd();\\n    }\\n\\n\\n    event PresaleCreated(\\n        string name,\\n        string symbol,\\n        address token,\\n        address paymentToken,\\n        address pairAddress,\\n        uint256 presaleAmount,\\n        uint256 totalSupply,\\n        uint256 saleAmount,\\n        string data\\n    );\\n}\\n\",\"keccak256\":\"0xa92bebcfc44aae6c1b6248cc3c0c090f75ce2003d00e2b57e350e09be1c10f81\",\"license\":\"GPL-3.0\"},\"contracts/presale/IPresale.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\nimport {IDistributor} from \\\"../distributor/IDistributor.sol\\\";\\n\\ninterface IPresale {\\n    function tokenInfo() external returns (address, string memory, string memory, uint256);\\n    function getProgress() external view returns (uint256);\\n    function isBondingCurveEnd() external view returns (bool);\\n    function distribute(IDistributor distributor, bytes calldata data) external;\\n    function info() external view returns (PresaleInfo memory);\\n    function isEnd() external view returns (bool);\\n\\n    struct PresaleInfo {\\n        address minter;\\n        address token;\\n        address pool;\\n\\n        address paymentToken;\\n        uint256 amountToRaise;\\n\\n        uint256 amountToSale;\\n        string data;\\n\\n        // 1e6 => 100%;\\n        uint24 toTreasuryRate;\\n\\n        bool isEnd;\\n        uint256 startTimestamp;\\n        bool isNewToken;\\n    }\\n\\n    event Distributed();\\n}\",\"keccak256\":\"0xa2b642b65e4bf1fb60432ccd5f07759f33023829a69586623cb737be3f5e6247\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080346100c057601f61078d38819003918201601f19168301916001600160401b038311848410176100c55780849260409485528339810103126100c05780516001600160a01b0391828216918290036100c05760200151908282168092036100c0576000549060018060a01b0319913383821617600055604051943391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a381600154161760015560025416176002556106b190816100dc8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b6000803560e01c8063715018a6146105485780638da5cb5b1461051c57806391f5bb07146104d7578063ec0f7cf014610437578063f286b19e146101f9578063f2fde38b146101365763f56681bf1461006d57600080fd5b3461011b578160031936011261011b5760206100876105a2565b60446100916105bd565b600154865163f56681bf60e01b81526001600160a01b0394851698810198909852908316602488015286928391165afa92831561012a5781936100de575b60208462ffffff855191168152f35b9092506020813d8211610122575b816100f96020938361062b565b8101031261011e57519162ffffff8316830361011b575062ffffff60206100cf565b80fd5b8280fd5b3d91506100ec565b509051903d90823e3d90fd5b50913461011e57602036600319011261011e576101516105a2565b9061015a6105d3565b6001600160a01b039182169283156101a757505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b5091903461011e578060031936011261011e576102146105a2565b61021c6105bd565b6003546001600160a01b03939190841690841603610238578480f35b826001541683825180958195635b14f18360e01b835216928388830152602095869160249889915afa9081156103c357889161041a575b506103cd5760025416908251632b09880360e11b8152818782015284818781865afa9081156103c35788916103a6575b5061035657839085845180948193635003a2db60e11b83528a8301525afa90811561034c57869161031f575b506102d4578480f35b5162461bcd60e51b8152928301526023908201527f50726573616c65506f6f6c4d616e616765723a20506f6f6c2069732070656e64604482015262696e6760e81b6064820152608490fd5b61033f9150833d8511610345575b610337818361062b565b810190610663565b386102cb565b503d61032d565b82513d88823e3d90fd5b825162461bcd60e51b81528087018590526025818701527f50726573616c65506f6f6c4d616e616765723a20426f6e64696e6720637572766044820152641948195b9960da1b6064820152608490fd5b6103bd9150853d871161034557610337818361062b565b3861029f565b84513d8a823e3d90fd5b825162461bcd60e51b81528087018590526022818701527f50726573616c65506f6f6c4d616e616765723a20506f6f6c2069732070617573604482015261195960f21b6064820152608490fd5b6104319150853d871161034557610337818361062b565b3861026f565b5091903461011e578260031936011261011e576001548151630ec0f7cf60e41b8152926001600160a01b0392916020918591829086165afa9283156104cd578493610489575b50602093505191168152f35b9092506020813d82116104c5575b816104a46020938361062b565b810103126104c1575181811681036104c15760209350913861047d565b8380fd5b3d9150610497565b81513d86823e3d90fd5b503461011b57602036600319011261011b576104f16105a2565b6104f96105d3565b60018060a01b03166bffffffffffffffffffffffff60a01b600354161760035580f35b509034610544578160031936011261054457905490516001600160a01b039091168152602090f35b5080fd5b503461011b578060031936011261011b576105616105d3565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b600435906001600160a01b03821682036105b857565b600080fd5b602435906001600160a01b03821682036105b857565b6000546001600160a01b031633036105e757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff82111761064d57604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126105b8575180151581036105b8579056fea26469706673582212208cdd5cd3a4ab5946caa0206efb305be87f32bf83764bbb2cecd46c71cc94f86f64736f6c63430008130033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b6000803560e01c8063715018a6146105485780638da5cb5b1461051c57806391f5bb07146104d7578063ec0f7cf014610437578063f286b19e146101f9578063f2fde38b146101365763f56681bf1461006d57600080fd5b3461011b578160031936011261011b5760206100876105a2565b60446100916105bd565b600154865163f56681bf60e01b81526001600160a01b0394851698810198909852908316602488015286928391165afa92831561012a5781936100de575b60208462ffffff855191168152f35b9092506020813d8211610122575b816100f96020938361062b565b8101031261011e57519162ffffff8316830361011b575062ffffff60206100cf565b80fd5b8280fd5b3d91506100ec565b509051903d90823e3d90fd5b50913461011e57602036600319011261011e576101516105a2565b9061015a6105d3565b6001600160a01b039182169283156101a757505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b5091903461011e578060031936011261011e576102146105a2565b61021c6105bd565b6003546001600160a01b03939190841690841603610238578480f35b826001541683825180958195635b14f18360e01b835216928388830152602095869160249889915afa9081156103c357889161041a575b506103cd5760025416908251632b09880360e11b8152818782015284818781865afa9081156103c35788916103a6575b5061035657839085845180948193635003a2db60e11b83528a8301525afa90811561034c57869161031f575b506102d4578480f35b5162461bcd60e51b8152928301526023908201527f50726573616c65506f6f6c4d616e616765723a20506f6f6c2069732070656e64604482015262696e6760e81b6064820152608490fd5b61033f9150833d8511610345575b610337818361062b565b810190610663565b386102cb565b503d61032d565b82513d88823e3d90fd5b825162461bcd60e51b81528087018590526025818701527f50726573616c65506f6f6c4d616e616765723a20426f6e64696e6720637572766044820152641948195b9960da1b6064820152608490fd5b6103bd9150853d871161034557610337818361062b565b3861029f565b84513d8a823e3d90fd5b825162461bcd60e51b81528087018590526022818701527f50726573616c65506f6f6c4d616e616765723a20506f6f6c2069732070617573604482015261195960f21b6064820152608490fd5b6104319150853d871161034557610337818361062b565b3861026f565b5091903461011e578260031936011261011e576001548151630ec0f7cf60e41b8152926001600160a01b0392916020918591829086165afa9283156104cd578493610489575b50602093505191168152f35b9092506020813d82116104c5575b816104a46020938361062b565b810103126104c1575181811681036104c15760209350913861047d565b8380fd5b3d9150610497565b81513d86823e3d90fd5b503461011b57602036600319011261011b576104f16105a2565b6104f96105d3565b60018060a01b03166bffffffffffffffffffffffff60a01b600354161760035580f35b509034610544578160031936011261054457905490516001600160a01b039091168152602090f35b5080fd5b503461011b578060031936011261011b576105616105d3565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b600435906001600160a01b03821682036105b857565b600080fd5b602435906001600160a01b03821682036105b857565b6000546001600160a01b031633036105e757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff82111761064d57604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126105b8575180151581036105b8579056fea26469706673582212208cdd5cd3a4ab5946caa0206efb305be87f32bf83764bbb2cecd46c71cc94f86f64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7383,
        "contract": "contracts/PresalePoolManager.sol:PresalePoolManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9981,
        "contract": "contracts/PresalePoolManager.sol:PresalePoolManager",
        "label": "config",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Configuration)9964"
      },
      {
        "astId": 9984,
        "contract": "contracts/PresalePoolManager.sol:PresalePoolManager",
        "label": "manager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(PresaleManager)10389"
      },
      {
        "astId": 9986,
        "contract": "contracts/PresalePoolManager.sol:PresalePoolManager",
        "label": "quoter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Configuration)9964": {
        "encoding": "inplace",
        "label": "contract Configuration",
        "numberOfBytes": "20"
      },
      "t_contract(PresaleManager)10389": {
        "encoding": "inplace",
        "label": "contract PresaleManager",
        "numberOfBytes": "20"
      }
    }
  }
}