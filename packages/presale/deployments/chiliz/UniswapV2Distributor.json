{
  "address": "0x01E57ea459b287506D0AB29668A0516CCC332A10",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Configuration",
          "name": "_config",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "canDistribute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x134b7295c4405407ace5799ffcb82fe898066823220b68dbb4b0fdca92d6fb7a",
  "receipt": {
    "to": null,
    "from": "0x86d36bd2EEfB7974B9D0720Af3418FC7Ca5C8897",
    "contractAddress": "0x01E57ea459b287506D0AB29668A0516CCC332A10",
    "transactionIndex": 0,
    "gasUsed": "2456978",
    "logsBloom": "0x
    "blockHash": "0xc4e6c20466d067011b1b8dbabed1d062be56d70b5e216e871dcbd14b484287fc",
    "transactionHash": "0x134b7295c4405407ace5799ffcb82fe898066823220b68dbb4b0fdca92d6fb7a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18395903,
        "transactionHash": "0x134b7295c4405407ace5799ffcb82fe898066823220b68dbb4b0fdca92d6fb7a",
        "address": "0x0000000000000000000000000000000000007005",
        "topics": [
          "0x33c981baba081f8fd2c52ac6ad1ea95b6814b4376640f55689051f6584729688",
          "0x00000000000000000000000086d36bd2eefb7974b9d0720af3418fc7ca5c8897"
        ],
        "data": "0x00000000000000000000000001e57ea459b287506d0ab29668a0516ccc332a10",
        "logIndex": 0,
        "blockHash": "0xc4e6c20466d067011b1b8dbabed1d062be56d70b5e216e871dcbd14b484287fc"
      }
    ],
    "blockNumber": 18395903,
    "cumulativeGasUsed": "2456978",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbfAAFc602ecb20196ddBaC168122458196098fC2",
    "0xE2918AA38088878546c1A18F2F9b1BC83297fdD3",
    "0x1918EbB39492C8b98865c5E53219c3f1AE79e76F"
  ],
  "numDeployments": 1,
  "solcInputHash": "857f6750aaf88ea2f7c1a0515a6bc843",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Configuration\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"canDistribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/distributor/UniswapV2Distributor.sol\":\"UniswapV2Distributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@kayen/token/contracts/IBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0;\\n\\ninterface IBlacklist {\\n    function isTransferBlacklisted(address target) external view returns (bool);\\n}\",\"keccak256\":\"0xc1d2c827b4b6417be6e296a6ac760b199e9ec78dd1197f86e0f4f11a7922938f\",\"license\":\"GPL-3.0\"},\"@kayen/uniswap-v2-core/contracts/UniswapV2ERC20.sol\":{\"content\":\"pragma solidity >=0.8.7;\\n\\nimport './interfaces/IUniswapV2ERC20.sol';\\nimport './libraries/SafeMath.sol';\\n\\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\\n    using SafeMath for uint;\\n\\n    string public constant name = 'Uniswap V2';\\n    string public constant symbol = 'UNI-V2';\\n    uint8 public constant decimals = 18;\\n    uint  public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint).max) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x9b2ee33b7df21c3e8d4e1130658a89880cd4422a23ef265ef8216bf4fdc61a68\"},\"@kayen/uniswap-v2-core/contracts/UniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.8.7;\\n\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./UniswapV2ERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\ncontract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {\\n    using SafeMath  for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"UniswapV2: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"UniswapV2: TRANSFER_FAILED\\\");\\n    }\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, \\\"UniswapV2: FORBIDDEN\\\"); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= type(uint112).max && balance1 <= type(uint112).max, \\\"UniswapV2: OVERFLOW\\\");\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\n                uint rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint denominator = rootK.mul(5).add(rootKLast);\\n                    uint liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        require(to != _token0 && to != _token1, \\\"UniswapV2: INVALID_TO\\\");\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, \\\"UniswapV2: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), \\\"UniswapV2: K\\\");\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\\n\",\"keccak256\":\"0x5134e5445a38e38984d73ebfd7b13f5bdc74c7047de690a0aeb1d78d16fbefed\"},\"@kayen/uniswap-v2-core/contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x61db17aebc5d812c7002d15c1da954065e56abe49d64b14c034abe5604d70eb3\"},\"@kayen/uniswap-v2-core/contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xdb17a1fb73e261e736ae8862be2d9a32964fc4b3741f48980f5cdc9d92b99a96\"},\"@kayen/uniswap-v2-core/contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x9e433765e9ef7b4ff5e406b260b222c47c2aa27d36df756db708064fcb239ae7\"},\"@kayen/uniswap-v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@kayen/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport {IUniswapV2ERC20} from \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20{\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xeed338fb2dbd9c7a48d4bef9334290d95b161c66c29ff2eaf1553538834b390a\"},\"@kayen/uniswap-v2-core/contracts/libraries/Math.sol\":{\"content\":\"pragma solidity >=0.8.7;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13150c7f06f46f402d34bfa5e4553e45f47a8ac9735ee2a4cf427eac578c13d5\"},\"@kayen/uniswap-v2-core/contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity >=0.8.7;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xeb3459a9045a412b69676bea4795bd0976d28dd343d73f553b5fe6a5a0e3118f\"},\"@kayen/uniswap-v2-core/contracts/libraries/UQ112x112.sol\":{\"content\":\"pragma solidity >=0.8.7;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xc3d9f78076053fde72007f1c6b22c73496e25ef49de1c63a999cc454aff417d6\"},\"@kayen/uniswap-v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external view returns (address);\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x49b6872ef62bc5deba472aac5d48b2152eede663164d423e5c405f1780b0353a\"},\"@kayen/uniswap-v2-periphery/contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity >=0.8.7;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0xeb3459a9045a412b69676bea4795bd0976d28dd343d73f553b5fe6a5a0e3118f\"},\"@kayen/uniswap-v2-periphery/contracts/libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"@kayen/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport {UniswapV2Pair} from \\\"@kayen/uniswap-v2-core/contracts/UniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint;\\n    bytes32 internal constant INIT_CODE_HASH = keccak256(abi.encodePacked(type(UniswapV2Pair).creationCode));\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint160(uint256(keccak256(abi.encodePacked(\\n                hex\\\"ff\\\",\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                INIT_CODE_HASH\\n            )))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbcd0f26e9c6e291375c6b059e134dea13452ced8c1e337224f82db92cfa94330\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@kayen/token/contracts/IBlacklist.sol\\\";\\nimport \\\"./distributor/IDistributor.sol\\\";\\n\\ncontract Configuration is Ownable, IBlacklist {\\n    mapping(address => bool) public paymentTokenWhitelist;\\n    mapping(address => bool) public distributorWhitelist;\\n    mapping(address => bool) public whitelistedContract;\\n    IDistributor[] public distributors;\\n    mapping(address => bool) public presaleMakers;\\n    mapping(address => bool) public isPoolPaused;\\n    mapping(address => bool) public transferBlacklist;\\n\\n    address public defaultDistributor;\\n\\n    uint256 public maxPresaleDuration = 365 days;\\n    bool public isAllPoolPaused;\\n\\n    address public feeVault;\\n\\n    uint24 public defaultDistributionFeeRate = 1e6 / 100; // 0.01 = 1%\\n    mapping(address => uint24) public distributionFeeRate;\\n\\n    // amount of payment token as minting fee\\n    uint256 public mintingFee = 0;\\n\\n    uint24 public defaultTradeFee = 1e6 / 100; // 0.01 = 1%\\n    mapping(address => uint24) public tradeFee;\\n\\n    uint24 public maxTreasuryRate = 8e5; // 80%\\n\\n    constructor(address _feeVault) {\\n        feeVault = _feeVault;\\n    }\\n\\n    function putPresaleMaker(address presaleMaker) external onlyOwner {\\n        presaleMakers[presaleMaker] = true;\\n    }\\n\\n    function removePresaleMaker(address presaleMaker) external onlyOwner {\\n        presaleMakers[presaleMaker] = false;\\n    }\\n\\n    function allowTokenForPayment(address token) external onlyOwner {\\n        paymentTokenWhitelist[token] = true;\\n    }\\n\\n    function disallowTokenForPayment(address token) external onlyOwner {\\n        paymentTokenWhitelist[token] = false;\\n    }\\n\\n    function allowWhitelistedContract(address _whitelistedContract) external onlyOwner {\\n        whitelistedContract[_whitelistedContract] = true;\\n    }\\n\\n    function disallowWhitelistedContract(address _whitelistedContract) external onlyOwner {\\n        whitelistedContract[_whitelistedContract] = false;\\n    }\\n\\n    function isWhitelistedContract(address _whitelistedContract) external view returns (bool) {\\n        return whitelistedContract[_whitelistedContract];\\n    }\\n\\n    function allowDistributor(address distributor) external onlyOwner {\\n        distributorWhitelist[distributor] = true;\\n        distributors.push(IDistributor(distributor));\\n    }\\n\\n    function disallowDistributor(address distributor) external onlyOwner {\\n        distributorWhitelist[distributor] = false;\\n        for (uint256 i = 0; i < distributors.length; i++) {\\n            if (address(distributors[i]) == distributor) {\\n                distributors[i] = distributors[distributors.length - 1];\\n                distributors.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function isDistributorWhitelisted(address distributor) external view returns (bool) {\\n        return distributorWhitelist[distributor];\\n    }\\n\\n    function putDefaultDistributionFeeRate(uint24 feeRate) external onlyOwner {\\n        // max 30%\\n        require(feeRate <= (1e6 / 100) * 30, \\\"Configuration: default distribution fee rate must be less than 30%\\\");\\n        defaultDistributionFeeRate = feeRate;\\n\\n        emit DefaultDistributionFeeRateUpdated(feeRate);\\n    }\\n\\n    function putDistributionFeeRateForToken(address token, uint24 feeRate) external onlyOwner {\\n        // max 30%\\n        require(feeRate <= (1e6 / 100) * 30, \\\"Configuration: default distribution fee rate must be less than 30%\\\");\\n        distributionFeeRate[token] = feeRate;\\n\\n        emit DistributionFeeRateForTokenUpdated(token, feeRate);\\n    }\\n\\n    function getDistributionFeeRate(address token0, address token1) external view returns (uint24) {\\n        uint24 fee0 = distributionFeeRate[token0];\\n        uint24 fee1 = distributionFeeRate[token1];\\n        if (fee0 == 0 && fee1 == 0) {\\n            return defaultDistributionFeeRate;\\n        }\\n        return fee0 > fee1 ? fee0 : fee1;\\n    }\\n\\n    function putFeeVault(address vault) external onlyOwner {\\n        require(vault != address(0), \\\"Configuration: fee vault cannot be zero address\\\");\\n        feeVault = vault;\\n\\n        emit FeeVaultUpdated(vault);\\n    }\\n\\n    function getFeeVault() external view returns (address) {\\n        return feeVault;\\n    }\\n\\n    function isPaused(address pool) external view returns (bool) {\\n        return isPoolPaused[pool] || isPausedAll();\\n    }\\n\\n    function isPausedAll() public view returns (bool) {\\n        return isAllPoolPaused;\\n    }\\n\\n    function pause(address pool) external onlyOwner {\\n        isPoolPaused[pool] = true;\\n    }\\n\\n    function unpause(address pool) external onlyOwner {\\n        isPoolPaused[pool] = false;\\n    }\\n\\n    function pauseAll() external onlyOwner {\\n        isAllPoolPaused = true;\\n    }\\n\\n    function unpauseAll() external onlyOwner {\\n        isAllPoolPaused = false;\\n    }\\n\\n    function putMintingFee(uint256 fee) external onlyOwner {\\n        // max 30%\\n        require(fee <= 1000e18, \\\"Configuration: minting fee must be less than 1000\\\");\\n        mintingFee = fee;\\n\\n        emit MintingFeeUpdated(fee);\\n    }\\n\\n    function putDefaultTradeFee(uint24 _tradeFee) external onlyOwner {\\n        assertTradeFee(_tradeFee);\\n        defaultTradeFee = _tradeFee;\\n\\n        emit DefaultTradeFeeUpdated(_tradeFee);\\n    }\\n\\n    function putTradeFeeForToken(address token, uint24 _tradeFee) external onlyOwner {\\n        assertTradeFee(_tradeFee);\\n        tradeFee[token] = _tradeFee;\\n\\n        emit TradeFeeForTokenUpdated(token, _tradeFee);\\n    }\\n\\n    function getTradeFee(address token0, address token1) external view returns (uint24) {\\n        uint24 fee0 = tradeFee[token0];\\n        uint24 fee1 = tradeFee[token1];\\n        if (fee0 == 0 && fee1 == 0) {\\n            return defaultTradeFee;\\n        }\\n        return fee0 > fee1 ? fee0 : fee1;\\n    }\\n\\n    function putMaxTreasuryRate(uint24 rate) external onlyOwner {\\n        require(rate <= 1e6, \\\"Configuration: max treasury rate must be less than 1e6\\\");\\n        maxTreasuryRate = rate;\\n\\n        emit MaxTreasuryRateUpdated(rate);\\n    }\\n\\n    function getMaxTreasuryRate() external view returns (uint24) {\\n        return maxTreasuryRate;\\n    }\\n\\n    function assertTradeFee(uint24 _tradeFee) internal view {\\n        // max 2%\\n        require(_tradeFee <= 1e6 / 50, \\\"Configuration: trade fee must be less than 1%\\\");\\n    }\\n\\n    function assertDistributeFee(uint24 _tradeFee) internal view {\\n        // max 2%\\n        require(_tradeFee <= 1e6 / 50, \\\"Configuration: trade fee must be less than 1%\\\");\\n    }\\n\\n    function putTransferBlacklist(address target) external onlyOwner {\\n        transferBlacklist[target] = true;\\n    }\\n\\n    function putComputedTransferBlacklist(address token1, address token2) external {\\n        require(presaleMakers[msg.sender], \\\"Configuration: FORBIDDEN\\\");\\n        for (uint256 i = 0; i < distributors.length; i++) {\\n            transferBlacklist[distributors[i].getPoolAddress(token1, token2)] = true;\\n        }\\n    }\\n\\n    function removeTransferBlacklist(address target) external onlyOwner {\\n        transferBlacklist[target] = false;\\n    }\\n\\n    function isTransferBlacklisted(address target) external view returns (bool) {\\n        return transferBlacklist[target];\\n    }\\n\\n    function putMaxPresaleDuration(uint256 duration) external onlyOwner {\\n        maxPresaleDuration = duration;\\n\\n        emit MaxPresaleDurationUpdated(duration);\\n    }\\n\\n    function putDefaultDistributor(address distributor) external onlyOwner {\\n        require(distributorWhitelist[distributor], \\\"Configuration: distributor not whitelisted\\\");\\n        defaultDistributor = distributor;\\n\\n        emit DefaultDistributorUpdated(distributor);\\n    }\\n\\n    event DefaultTradeFeeUpdated(uint24 fee);\\n    event TradeFeeForTokenUpdated(address token, uint24 fee);\\n    event MintingFeeUpdated(uint256 fee);\\n    event DefaultDistributionFeeRateUpdated(uint24 fee);\\n    event DistributionFeeRateForTokenUpdated(address token, uint24 fee);\\n    event MaxTreasuryRateUpdated(uint24 rate);\\n    event MaxPresaleDurationUpdated(uint256 duration);\\n    event DefaultDistributorUpdated(address distributor);\\n    event FeeVaultUpdated(address vault);\\n}\\n\",\"keccak256\":\"0x5774ee370e8b49abbc5022eaf3757b71dd58acec20f23d9164f76297efe4657a\",\"license\":\"GPL-3.0\"},\"contracts/distributor/Distributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\nimport {IDistributor} from \\\"./IDistributor.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Configuration} from \\\"../Configuration.sol\\\";\\n\\nabstract contract Distributor is IDistributor {\\n    using SafeERC20 for IERC20;\\n    Configuration internal immutable config;\\n\\n    constructor(Configuration _config) {\\n        config = _config;\\n    }\\n\\n    function distribute(address token0, address token1, uint160 sqrtPriceX96, uint256 deadline) external override {\\n        _doDistribute(token0, token1, sqrtPriceX96, deadline);\\n        sendRestToVault(token0, token1);\\n    }\\n\\n    function _doDistribute(address token0, address token1, uint160 sqrtPriceX96, uint256 deadline) internal virtual;\\n\\n    function sendRestToVault(address token0, address token1) internal {\\n        IERC20(token0).safeTransfer(config.feeVault(), IERC20(token0).balanceOf(address(this)));\\n        IERC20(token1).safeTransfer(config.feeVault(), IERC20(token1).balanceOf(address(this)));\\n    }\\n\\n}\",\"keccak256\":\"0xcdf295a3e801d86c299b978b56b64f42d044a80aea42a68f4647698d7b1308f9\",\"license\":\"GPL-3.0\"},\"contracts/distributor/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\ninterface IDistributor {\\n    function distribute(address token0, address token1, uint160 sqrtPriceX96, uint256 deadline) external;\\n    function getPoolAddress(address token0, address token1) external returns (address);\\n    function canDistribute(address token0, address token1) external view returns (bool);\\n}\",\"keccak256\":\"0x9eaa8804f17c115e28333ad5095e957a6f78e8be0988b928b6378407e779796a\",\"license\":\"GPL-3.0\"},\"contracts/distributor/UniswapV2Distributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\nimport {Distributor} from \\\"./Distributor.sol\\\";\\nimport {Configuration} from \\\"../Configuration.sol\\\";\\n\\nimport {IUniswapV2Router01} from \\\"@kayen/uniswap-v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\\\";\\nimport {UniswapV2Library} from \\\"@kayen/uniswap-v2-periphery/contracts/libraries/UniswapV2Library.sol\\\";\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IUniswapV2Factory} from \\\"@kayen/uniswap-v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport {IUniswapV2Pair} from \\\"@kayen/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\ncontract UniswapV2Distributor is Distributor {\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Factory immutable factory;\\n    IUniswapV2Router01 immutable router;\\n\\n    constructor(Configuration _config, IUniswapV2Factory _factory, IUniswapV2Router01 _router) Distributor(_config) {\\n        factory = _factory;\\n        router = _router;\\n    }\\n\\n    function getPoolAddress(address token0, address token1) external returns (address) {\\n        return UniswapV2Library.pairFor(address(factory), token0, token1);\\n    }\\n\\n    function canDistribute(address token0, address token1) public view override returns (bool) {\\n        return true;\\n    }\\n\\n    function _doDistribute(address token0, address token1, uint160 sqrtXPrice96, uint256 deadline) internal override {\\n        (address tokenA, address tokenB) = UniswapV2Library.sortTokens(token0, token1);\\n        address pairAddress = factory.getPair(tokenA, tokenB);\\n        uint256 tokenABalance = IERC20(tokenA).balanceOf(address(this));\\n        uint256 tokenBBalance = IERC20(tokenB).balanceOf(address(this));\\n\\n        if (pairAddress == address(0)) {\\n            pairAddress = factory.createPair(tokenA, tokenB);\\n        }\\n\\n        IERC20(tokenA).safeTransfer(pairAddress, tokenABalance);\\n        IERC20(tokenB).safeTransfer(pairAddress, tokenBBalance);\\n        IUniswapV2Pair(pairAddress).mint(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x2d2008d95a39db63553afd5c95f3c05a0c24e9c5e3e9018ba114213f0e8c3213\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e0346100ac57601f612b3c38819003918201601f19168301916001600160401b038311848410176100b1578084926060946040528339810103126100ac5780516001600160a01b03919082811681036100ac5760208201519183831683036100ac576040015192831683036100ac5760805260a05260c052604051612a7490816100c882396080518161020d015260a05181818160e00152818161040201526105ce015260c051815050f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c80633fa1e0c8146104fa57806381528da91461007057639711eb151461003d57600080fd5b3461006b57604036600319011261006b57610056610639565b5061005f61064f565b50602060405160018152f35b600080fd5b3461006b57608036600319011261006b57610089610639565b61009161064f565b6044356001600160a01b0381160361006b576100ad818361091a565b60405163e6a4390560e01b81526001600160a01b03808416600483015282166024820152919391602081806044810103817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561030c576000916104db575b506040516370a0823160e01b80825230600483015295919283929091906020826024816001600160a01b0385165afa91821561030c576000926104a7575b50604051888152306004820152936020856024816001600160a01b0388165afa94851561030c57600095610473575b506001600160a01b0316156103c8575b928480936101b46101c29460009860209860018060a01b03166106c2565b6001600160a01b03166106c2565b6040516335313c2160e11b815230600482015292839160249183916001600160a01b03165af1801561030c5761039d575b506040516323c1116160e11b808252926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169316602083600481875afa92831561030c5760009361037c575b5060405190868252306004830152602082602481845afa91821561030c57600092610347575b509060209361027c926106c2565b6040519384526001600160a01b03169291829060049082905afa90811561030c57600091610318575b50604051928352306004840152602083602481855afa91821561030c576000926102d6575b6102d493506106c2565b005b91506020833d602011610304575b816102f160209383610681565b8101031261006b576102d49251916102ca565b3d91506102e4565b6040513d6000823e3d90fd5b61033a915060203d602011610340575b6103328183610681565b8101906106a3565b836102a5565b503d610328565b91506020823d602011610374575b8161036260209383610681565b8101031261006b57905190602061026e565b3d9150610355565b61039691935060203d602011610340576103328183610681565b9186610248565b602090813d83116103c1575b6103b38183610681565b8101031261006b57836101f3565b503d6103a9565b6040516364e329cb60e11b81526001600160a01b0380831660048301528416602482015292945091929091906020848060448101038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af191821561030c576000956101b46101c2946020978991610456575b50975050939250909350610196565b61046d9150883d8a11610340576103328183610681565b8c610447565b9094506020813d60201161049f575b8161048f60209383610681565b8101031261006b57519389610186565b3d9150610482565b9091506020813d6020116104d3575b816104c360209383610681565b8101031261006b57519088610157565b3d91506104b6565b6104f4915060203d602011610340576103328183610681565b85610119565b3461006b57604036600319011261006b57610524610516610639565b61051e61064f565b9061091a565b9060405191602092838101926bffffffffffffffffffffffff199283809260601b16855260601b16603482015260288152606081019281841067ffffffffffffffff85111761062357836040528151902092608061205d9261058887850184610681565b83835201916109e283396105ba8560405180936105ad838301968792519283916108f7565b8101038084520182610681565b519020604051928484019260ff60f81b84527f000000000000000000000000000000000000000000000000000000000000000060601b166021850152603584015260558301526055825261060d82610665565b905190206040516001600160a01b039091168152f35b634e487b7160e01b600052604160045260246000fd5b600435906001600160a01b038216820361006b57565b602435906001600160a01b038216820361006b57565b6080810190811067ffffffffffffffff82111761062357604052565b90601f8019910116810190811067ffffffffffffffff82111761062357604052565b9081602091031261006b57516001600160a01b038116810361006b5790565b916040918251906020948583019363a9059cbb60e01b855260018060a01b0380931660248501526044840152604483526106fb83610665565b16908351918483019167ffffffffffffffff92848110848211176106235786528684527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487850152600080958192519082855af1903d15610839573d928311610825579061078893929186519261077b89601f19601f8401160185610681565b83523d868985013e610844565b8051918215918583156107fa575b5050509050156107a4575050565b60849250519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b9193818094500103126108215783015190811515820361081e575080388085610796565b80fd5b5080fd5b634e487b7160e01b85526041600452602485fd5b906107889392506060915b919290156108a65750815115610858575090565b3b156108615790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156108b95750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526108e981518092816024860152602086860191016108f7565b601f01601f19168101030190fd5b60005b83811061090a5750506000910152565b81810151838201526020016108fa565b90916001600160a01b039182841683821680821461098e57101561098957925b9183161561094457565b60405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606490fd5b61093a565b60405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b6064820152608490fdfe608080604052346100eb57602081610018600a936100f0565b82815201692ab734b9bbb0b8102b1960b11b8152206001602060405161003d816100f0565b82815201603160f81b815220906040519160208301917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8352604084015260608301524660808301523060a083015260a0825260c082019180831060018060401b038411176100d55760408390525190206003556001600c55600580546001600160a01b03191633179055611f5190816200010c8239f35b634e487b7160e01b600052604160045260246000fd5b600080fd5b604081019081106001600160401b038211176100d55760405256fe6080604052600436101561001257600080fd5b6000803560e01c8063022c0d9f146110e857806306fdde03146110a55780630902f1ac1461104c578063095ea7b3146110255780630dfe168114610ffc57806318160ddd14610fdf57806323b872dd14610f3e57806330adf81f14610f03578063313ce56714610ee75780633644e51514610ec9578063485cc95514610e2d5780635909c0d514610e0f5780635a3d549314610df15780636a62784214610b0557806370a0823114610acc5780637464fc3d14610aae5780637ecebe0014610a7557806389afcb441461070557806395d89b41146106c2578063a9059cbb14610690578063ba9a7a5614610673578063bc25cf771461052a578063c45a015514610501578063d21220a7146104d8578063d505accf146102c9578063dd62ed3e1461027a5763fff6cae91461014657600080fd5b346102775780600319360112610277576101646001600c5414611857565b600c8190556006546040516370a0823160e01b808252306004830152916020916001600160a01b039183908290602490829086165afa91821561026c578391869361023b575b50600754169360246040518096819382523060048301525afa9182156102305784926101f9575b506101f19250600854916001600160701b03808460701c1693169161192b565b6001600c5580f35b90915082813d8311610229575b610210818361172b565b81010312610224576101f1915190386101d1565b600080fd5b503d610206565b6040513d86823e3d90fd5b8281939294503d8311610265575b610253818361172b565b810103126102245782905191386101aa565b503d610249565b6040513d87823e3d90fd5b80fd5b5034610277576040366003190112610277576102946116c7565b604061029e6116dd565b9260018060a01b03809316815260026020522091166000526020526020604060002054604051908152f35b50346102775760e0366003190112610277576102e36116c7565b6102eb6116dd565b604435906064356084359060ff82168092036104d45742811061049a576003546001600160a01b0386811680895260046020526040892080549195929492906000198314610486576001830190556040519260208401927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452876040860152868916606086015289608086015260a085015260c084015260c0835260e083019383851067ffffffffffffffff86111761047057848b94610122608095602098604052825190209161010081019461190160f01b86526101028201520152604281526103d68161170f565b519020906040519182528482015260a435604082015260c435606082015282805260015afa1561026c57855116908115159182610466575b5050156104215761041e92611796565b80f35b60405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e4154555245000000006044820152606490fd5b149050388061040e565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b8b52601160045260248bfd5b60405162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b6044820152606490fd5b8580fd5b50346102775780600319360112610277576007546040516001600160a01b039091168152602090f35b50346102775780600319360112610277576005546040516001600160a01b039091168152602090f35b50346102775760208060031936011261066f576105456116c7565b906105546001600c5414611857565b600c8390556006546007546040516370a0823160e01b80825230600483015290946001600160a01b039283169490939092168286602481845afa958615610664578796610633575b506105bf90846105b96001600160701b0398896008541690611de7565b91611bcc565b6040519081523060048201528181602481875afa9182156106285786926105f8575b50506105b9906101f19460085460701c1690611de7565b90809250813d8311610621575b61060f818361172b565b810103126102245751836105b96105e1565b503d610605565b6040513d88823e3d90fd5b9095508281813d831161065d575b61064b818361172b565b810103126102245751946105bf61059c565b503d610641565b6040513d89823e3d90fd5b5080fd5b503461027757806003193601126102775760206040516103e88152f35b5034610277576040366003190112610277576106b76106ad6116c7565b60243590336117ed565b602060405160018152f35b50346102775780600319360112610277576107016040516106e2816116f3565b60068152652aa72496ab1960d11b60208201526040519182918261174d565b0390f35b50346102775760209081600319360112610277576107216116c7565b906107306001600c5414611857565b80600c556107536008546001600160701b0391828216928260701c169160e01c90565b506006546007546040516370a0823160e01b8082523060048301529794966001600160a01b039384169690949192841686846024818b5afa938415610a6a578294610a3b575b5060405199808b523060048c0152878b602481855afa988915610a30578a9b849b9a6109fd575b50308452600189526107fb6107da8660408720549c611a8b565b966107ef6107f48d6107ef8954948592611e77565b611897565b9d8d611e77565b998b1515806109f4575b1561099e576024939291858b9230825260018452610827816040842054611de7565b30835260018552604083205561083e818354611de7565b8255604051908152600080516020611efc833981519152843092a36108648d8b83611bcc565b61086f8c8b86611bcc565b604051948580928582523060048301525afa92831561023057908991859461096d575b5060246040518094819382523060048301525afa928315610961579261092b575b50986108c2929160409a61192b565b610908575b855191858352848484015216907fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496863392a36001600c558351928352820152f35b6109236008546001600160701b03808260701c169116611e77565b600b556108c7565b929150988683813d831161095a575b610944818361172b565b81010312610224579151919890919060406108b3565b503d61093a565b604051903d90823e3d90fd5b8281939295503d8311610997575b610985818361172b565b81010312610224578890519238610892565b503d61097b565b60405162461bcd60e51b8152600481018b9052602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d0955493915160c21b6064820152608490fd5b508a1515610805565b8980929c50819b503d8311610a29575b610a17818361172b565b81010312610224578a985199386107c0565b503d610a0d565b6040513d85823e3d90fd5b9093508681813d8311610a63575b610a53818361172b565b8101031261022457519238610799565b503d610a49565b6040513d84823e3d90fd5b5034610277576020366003190112610277576020906040906001600160a01b03610a9d6116c7565b168152600483522054604051908152f35b50346102775780600319360112610277576020600b54604051908152f35b5034610277576020366003190112610277576020906040906001600160a01b03610af46116c7565b168152600183522054604051908152f35b5034610277576020908160031936011261027757610b216116c7565b90610b306001600c5414611857565b80600c55610b536008546001600160701b0391828216928260701c169160e01c90565b506006546040516370a0823160e01b8082523060048301529094939290916001600160a01b039088908790602490829085165afa95861561026c579088918697610dc0575b50600754169260246040518095819382523060048301525afa918215610230578492610d91575b506001600160701b039283811692610bd78488611de7565b9685841694610be68684611de7565b9789610bf28787611a8b565b978254938415600014610d5d575050610c179250610c1291508990611e77565b611d26565b6103e7198101908111610d475798610c30600054611d80565b6000556000805260018b52610c49604060002054611d80565b6000805260018c52604060002055600080600080516020611efc8339815191528d6040516103e88152a35b8915610cf15790610c8b8a610c90969594936118b7565b61192b565b610cd3575b50604051918252838201527f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f60403392a26001600c55604051908152f35b610ce89060085490808260701c169116611e77565b600b5538610c95565b60405162461bcd60e51b8152600481018c9052602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d3525395115160c21b6064820152608490fd5b634e487b7160e01b600052601160045260246000fd5b610d716107ef916107ef87610d7896611e77565b948c611e77565b905080821015610d8a57505b98610c74565b9050610d84565b9091508681813d8311610db9575b610da9818361172b565b8101031261022457519038610bbf565b503d610d9f565b8281939298503d8311610dea575b610dd8818361172b565b81010312610224578790519538610b98565b503d610dce565b50346102775780600319360112610277576020600a54604051908152f35b50346102775780600319360112610277576020600954604051908152f35b503461027757604036600319011261027757610e476116c7565b610e4f6116dd565b6005546001600160a01b03919082163303610e8d57816bffffffffffffffffffffffff60a01b93168360065416176006551690600754161760075580f35b60405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b6044820152606490fd5b50346102775780600319360112610277576020600354604051908152f35b5034610277578060031936011261027757602060405160128152f35b503461027757806003193601126102775760206040517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98152f35b503461027757606036600319011261027757610f9a610f5b6116c7565b610f636116dd565b6044359160018060a01b038116808652602095600287526040812033600052875260001960406000205403610fa3575b50506117ed565b60405160018152f35b80826040925260028852818120336000528852610fc4868360002054611de7565b92815260028852203360005286526040600020553880610f93565b503461027757806003193601126102775760209054604051908152f35b50346102775780600319360112610277576006546040516001600160a01b039091168152602090f35b5034610277576040366003190112610277576106b76110426116c7565b6024359033611796565b5034610277578060031936011261027757606063ffffffff6110836008546001600160701b0391828216928260701c169160e01c90565b909291604051936001600160701b038092168552166020840152166040820152f35b50346102775780600319360112610277576107016040516110c5816116f3565b600a8152692ab734b9bbb0b8102b1960b11b60208201526040519182918261174d565b5034610277576080366003190112610277576001600160a01b03604435808216900361066f5767ffffffffffffffff6064351161066f5736602360643501121561066f5767ffffffffffffffff606435600401351161066f573660246064356004013560643501011161066f576111636001600c5414611857565b81600c556004351590811580926116bc575b15611669576111996008546001600160701b0391828216928260701c169160e01c90565b506001600160701b03829492166004351080611655575b156116065782600654168360075416928185604435161415806115f8575b156115bb576115a7575b602435611593575b606435600401356114d0575b906020602492604051938480926370a0823160e01b82523060048301525afa918215610628578692611499575b506020602493604051948580926370a0823160e01b82523060048301525afa928315610628578693611465575b5061125c6004356001600160701b038716611d19565b82111561145e5761128161127b6004356001600160701b038816611d19565b83611d19565b945b6001600160701b0382169361129a60243586611d19565b811115611457576112b66112b060243587611d19565b82611d19565b945b871580159061144e575b156113fd576113136113036112e86112d988611e39565b6112e28c611e58565b90611de7565b6112fd6112f486611e39565b6112e28b611e58565b90611e77565b916001600160701b038516611e77565b90620f42409182810292818404811482151715610d47578304036113c1571061138d5761133f9361192b565b60405192835260208301526004356040830152602435606083015260443516907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82260803392a36001600c5580f35b60405162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b6044820152606490fd5b60405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606490fd5b60405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b6064820152608490fd5b508515156112c2565b87946112b8565b8594611283565b9092506020813d602011611491575b816114816020938361172b565b8101031261022457519138611246565b3d9150611474565b9291506020833d6020116114c8575b816114b56020938361172b565b8101031261022457915190916020611219565b3d91506114a8565b83604435163b156104d4576040516304347a1760e21b815233600482015260043560248201526024356044820152608060648201526064356004013560848201526064356004013560246064350160a48301378660a46064356004013583010152868160a481601f19601f60643560040135011681010301818389604435165af1801561066457611562575b506111ec565b67ffffffffffffffff819792971161157f5760405294602061155c565b634e487b7160e01b82526041600452602482fd5b6115a260243560443585611bcc565b6111e0565b6115b660043560443583611bcc565b6111d8565b60405162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b6044820152606490fd5b5083856044351614156111ce565b60405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152605960f81b6064820152608490fd5b506001600160701b038116602435106111b0565b60405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b6064820152608490fd5b506024351515611175565b600435906001600160a01b038216820361022457565b602435906001600160a01b038216820361022457565b6040810190811067ffffffffffffffff82111761047057604052565b6080810190811067ffffffffffffffff82111761047057604052565b90601f8019910116810190811067ffffffffffffffff82111761047057604052565b6020808252825181830181905290939260005b82811061178257505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611760565b909160207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259160018060a01b03809416938460005260028352604060002095169485600052825280604060002055604051908152a3565b90916020600080516020611efc8339815191529160018060a01b038094169360009585875260018452611824836040892054611de7565b868852600185526040882055169485815260406118448382842054611dd2565b91878152600185522055604051908152a3565b1561185e57565b60405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b6044820152606490fd5b81156118a1570490565b634e487b7160e01b600052601260045260246000fd5b600080516020611efc83398151915260206000926118d6858554611dd2565b845560018060a01b031693848452600182526118f6816040862054611dd2565b858552600183526040852055604051908152a3565b81810292918115918404141715610d4757565b91908201809211610d4757565b916001600160701b03908184111580611a81575b15611a46576008549363ffffffff9460e01c8542160391858311610d47577f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad19660409685941680151580611a3b575b80611a30575b6119d7575b505050607093841b600160701b600160e01b031691169081174260e01b6001600160e01b031916176008819055845191825290921c166020820152a1565b611a2592611a1d926001600160e01b0391611a079190611a0290611a15611a0d878787858789611eae565b611edd565b1661190b565b60095461191e565b600955611eae565b600a5461191e565b600a55388080611999565b508482161515611994565b50848316151561198e565b60405162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b6044820152606490fd5b508183111561193f565b600554604051622fcfcb60e31b815292939291906001600160a01b03906020908490600490829085165afa928315611bc057600093611b82575b508216151593600b549185600014611b715782611ae3575b50505050565b610c12611b0091611b06936001600160701b038091169116611e77565b91611d26565b90818111611b15575b80611add565b611b256000546112fd8484611de7565b90600581029080820460051481151715610d475760058204036113c157611b5592611b4f91611dd2565b90611897565b80611b61575b80611b0f565b611b6a916118b7565b3880611b5b565b50509050611b7b57565b6000600b55565b6020939193813d8211611bb8575b81611b9d6020938361172b565b8101031261066f575190838216820361027757509138611ac5565b3d9150611b90565b6040513d6000823e3d90fd5b9060405192611bda846116f3565b601984527f7472616e7366657228616464726573732c75696e74323536290000000000000060209485015260405163a9059cbb60e01b8186019081526001600160a01b039093166024820152604480820192909252908152611c3b8161170f565b600092839283809351925af1903d15611d12573d67ffffffffffffffff811161157f5760405190611c75601f8201601f191686018361172b565b81523d828583013e5b82611cd2575b505015611c8e5750565b6064906040519062461bcd60e51b82526004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c45440000000000006044820152fd5b8051925082159190848315611cee575b50505090503880611c84565b91938180945001031261066f57820151908115158203610277575080388084611ce2565b6060611c7e565b91908203918211610d4757565b9060006003831115611d7357508160019080821c828101809111610d475791905b848310611d5357505050565b90919350611d6a84611d658184611897565b61191e565b821c9190611d47565b91611d7a57565b60019150565b906103e8820191828111610d47578210611d9657565b60405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606490fd5b9190611dde908361191e565b918210611d9657565b9190611df39083611d19565b918211611dfc57565b60405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606490fd5b906103e89182810292818404811482151715610d47578304036113c157565b90600382029180830460031481151715610d475760038304036113c157565b600092918015918215611e8e575b5050156113c157565b91509250611ea6611e9f848361190b565b9384611897565b143880611e85565b600160701b600160e01b03607082901b16906001600160701b0316808204600160701b1490151715610d475790565b906001600160701b03169081156118a1576001600160e01b0316049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122023f697536f0ba221a647249d20d2f108875f5c2ec8ee876653dde08cafd678d064736f6c63430008130033a2646970667358221220686e8b048c83e03d522012fd9affe8f31509e09b9166462fc0abdbe9b6a0a4a164736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80633fa1e0c8146104fa57806381528da91461007057639711eb151461003d57600080fd5b3461006b57604036600319011261006b57610056610639565b5061005f61064f565b50602060405160018152f35b600080fd5b3461006b57608036600319011261006b57610089610639565b61009161064f565b6044356001600160a01b0381160361006b576100ad818361091a565b60405163e6a4390560e01b81526001600160a01b03808416600483015282166024820152919391602081806044810103817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561030c576000916104db575b506040516370a0823160e01b80825230600483015295919283929091906020826024816001600160a01b0385165afa91821561030c576000926104a7575b50604051888152306004820152936020856024816001600160a01b0388165afa94851561030c57600095610473575b506001600160a01b0316156103c8575b928480936101b46101c29460009860209860018060a01b03166106c2565b6001600160a01b03166106c2565b6040516335313c2160e11b815230600482015292839160249183916001600160a01b03165af1801561030c5761039d575b506040516323c1116160e11b808252926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169316602083600481875afa92831561030c5760009361037c575b5060405190868252306004830152602082602481845afa91821561030c57600092610347575b509060209361027c926106c2565b6040519384526001600160a01b03169291829060049082905afa90811561030c57600091610318575b50604051928352306004840152602083602481855afa91821561030c576000926102d6575b6102d493506106c2565b005b91506020833d602011610304575b816102f160209383610681565b8101031261006b576102d49251916102ca565b3d91506102e4565b6040513d6000823e3d90fd5b61033a915060203d602011610340575b6103328183610681565b8101906106a3565b836102a5565b503d610328565b91506020823d602011610374575b8161036260209383610681565b8101031261006b57905190602061026e565b3d9150610355565b61039691935060203d602011610340576103328183610681565b9186610248565b602090813d83116103c1575b6103b38183610681565b8101031261006b57836101f3565b503d6103a9565b6040516364e329cb60e11b81526001600160a01b0380831660048301528416602482015292945091929091906020848060448101038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af191821561030c576000956101b46101c2946020978991610456575b50975050939250909350610196565b61046d9150883d8a11610340576103328183610681565b8c610447565b9094506020813d60201161049f575b8161048f60209383610681565b8101031261006b57519389610186565b3d9150610482565b9091506020813d6020116104d3575b816104c360209383610681565b8101031261006b57519088610157565b3d91506104b6565b6104f4915060203d602011610340576103328183610681565b85610119565b3461006b57604036600319011261006b57610524610516610639565b61051e61064f565b9061091a565b9060405191602092838101926bffffffffffffffffffffffff199283809260601b16855260601b16603482015260288152606081019281841067ffffffffffffffff85111761062357836040528151902092608061205d9261058887850184610681565b83835201916109e283396105ba8560405180936105ad838301968792519283916108f7565b8101038084520182610681565b519020604051928484019260ff60f81b84527f000000000000000000000000000000000000000000000000000000000000000060601b166021850152603584015260558301526055825261060d82610665565b905190206040516001600160a01b039091168152f35b634e487b7160e01b600052604160045260246000fd5b600435906001600160a01b038216820361006b57565b602435906001600160a01b038216820361006b57565b6080810190811067ffffffffffffffff82111761062357604052565b90601f8019910116810190811067ffffffffffffffff82111761062357604052565b9081602091031261006b57516001600160a01b038116810361006b5790565b916040918251906020948583019363a9059cbb60e01b855260018060a01b0380931660248501526044840152604483526106fb83610665565b16908351918483019167ffffffffffffffff92848110848211176106235786528684527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487850152600080958192519082855af1903d15610839573d928311610825579061078893929186519261077b89601f19601f8401160185610681565b83523d868985013e610844565b8051918215918583156107fa575b5050509050156107a4575050565b60849250519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b9193818094500103126108215783015190811515820361081e575080388085610796565b80fd5b5080fd5b634e487b7160e01b85526041600452602485fd5b906107889392506060915b919290156108a65750815115610858575090565b3b156108615790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156108b95750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526108e981518092816024860152602086860191016108f7565b601f01601f19168101030190fd5b60005b83811061090a5750506000910152565b81810151838201526020016108fa565b90916001600160a01b039182841683821680821461098e57101561098957925b9183161561094457565b60405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606490fd5b61093a565b60405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b6064820152608490fdfe608080604052346100eb57602081610018600a936100f0565b82815201692ab734b9bbb0b8102b1960b11b8152206001602060405161003d816100f0565b82815201603160f81b815220906040519160208301917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8352604084015260608301524660808301523060a083015260a0825260c082019180831060018060401b038411176100d55760408390525190206003556001600c55600580546001600160a01b03191633179055611f5190816200010c8239f35b634e487b7160e01b600052604160045260246000fd5b600080fd5b604081019081106001600160401b038211176100d55760405256fe6080604052600436101561001257600080fd5b6000803560e01c8063022c0d9f146110e857806306fdde03146110a55780630902f1ac1461104c578063095ea7b3146110255780630dfe168114610ffc57806318160ddd14610fdf57806323b872dd14610f3e57806330adf81f14610f03578063313ce56714610ee75780633644e51514610ec9578063485cc95514610e2d5780635909c0d514610e0f5780635a3d549314610df15780636a62784214610b0557806370a0823114610acc5780637464fc3d14610aae5780637ecebe0014610a7557806389afcb441461070557806395d89b41146106c2578063a9059cbb14610690578063ba9a7a5614610673578063bc25cf771461052a578063c45a015514610501578063d21220a7146104d8578063d505accf146102c9578063dd62ed3e1461027a5763fff6cae91461014657600080fd5b346102775780600319360112610277576101646001600c5414611857565b600c8190556006546040516370a0823160e01b808252306004830152916020916001600160a01b039183908290602490829086165afa91821561026c578391869361023b575b50600754169360246040518096819382523060048301525afa9182156102305784926101f9575b506101f19250600854916001600160701b03808460701c1693169161192b565b6001600c5580f35b90915082813d8311610229575b610210818361172b565b81010312610224576101f1915190386101d1565b600080fd5b503d610206565b6040513d86823e3d90fd5b8281939294503d8311610265575b610253818361172b565b810103126102245782905191386101aa565b503d610249565b6040513d87823e3d90fd5b80fd5b5034610277576040366003190112610277576102946116c7565b604061029e6116dd565b9260018060a01b03809316815260026020522091166000526020526020604060002054604051908152f35b50346102775760e0366003190112610277576102e36116c7565b6102eb6116dd565b604435906064356084359060ff82168092036104d45742811061049a576003546001600160a01b0386811680895260046020526040892080549195929492906000198314610486576001830190556040519260208401927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98452876040860152868916606086015289608086015260a085015260c084015260c0835260e083019383851067ffffffffffffffff86111761047057848b94610122608095602098604052825190209161010081019461190160f01b86526101028201520152604281526103d68161170f565b519020906040519182528482015260a435604082015260c435606082015282805260015afa1561026c57855116908115159182610466575b5050156104215761041e92611796565b80f35b60405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e4154555245000000006044820152606490fd5b149050388061040e565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b8b52601160045260248bfd5b60405162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b6044820152606490fd5b8580fd5b50346102775780600319360112610277576007546040516001600160a01b039091168152602090f35b50346102775780600319360112610277576005546040516001600160a01b039091168152602090f35b50346102775760208060031936011261066f576105456116c7565b906105546001600c5414611857565b600c8390556006546007546040516370a0823160e01b80825230600483015290946001600160a01b039283169490939092168286602481845afa958615610664578796610633575b506105bf90846105b96001600160701b0398896008541690611de7565b91611bcc565b6040519081523060048201528181602481875afa9182156106285786926105f8575b50506105b9906101f19460085460701c1690611de7565b90809250813d8311610621575b61060f818361172b565b810103126102245751836105b96105e1565b503d610605565b6040513d88823e3d90fd5b9095508281813d831161065d575b61064b818361172b565b810103126102245751946105bf61059c565b503d610641565b6040513d89823e3d90fd5b5080fd5b503461027757806003193601126102775760206040516103e88152f35b5034610277576040366003190112610277576106b76106ad6116c7565b60243590336117ed565b602060405160018152f35b50346102775780600319360112610277576107016040516106e2816116f3565b60068152652aa72496ab1960d11b60208201526040519182918261174d565b0390f35b50346102775760209081600319360112610277576107216116c7565b906107306001600c5414611857565b80600c556107536008546001600160701b0391828216928260701c169160e01c90565b506006546007546040516370a0823160e01b8082523060048301529794966001600160a01b039384169690949192841686846024818b5afa938415610a6a578294610a3b575b5060405199808b523060048c0152878b602481855afa988915610a30578a9b849b9a6109fd575b50308452600189526107fb6107da8660408720549c611a8b565b966107ef6107f48d6107ef8954948592611e77565b611897565b9d8d611e77565b998b1515806109f4575b1561099e576024939291858b9230825260018452610827816040842054611de7565b30835260018552604083205561083e818354611de7565b8255604051908152600080516020611efc833981519152843092a36108648d8b83611bcc565b61086f8c8b86611bcc565b604051948580928582523060048301525afa92831561023057908991859461096d575b5060246040518094819382523060048301525afa928315610961579261092b575b50986108c2929160409a61192b565b610908575b855191858352848484015216907fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496863392a36001600c558351928352820152f35b6109236008546001600160701b03808260701c169116611e77565b600b556108c7565b929150988683813d831161095a575b610944818361172b565b81010312610224579151919890919060406108b3565b503d61093a565b604051903d90823e3d90fd5b8281939295503d8311610997575b610985818361172b565b81010312610224578890519238610892565b503d61097b565b60405162461bcd60e51b8152600481018b9052602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d0955493915160c21b6064820152608490fd5b508a1515610805565b8980929c50819b503d8311610a29575b610a17818361172b565b81010312610224578a985199386107c0565b503d610a0d565b6040513d85823e3d90fd5b9093508681813d8311610a63575b610a53818361172b565b8101031261022457519238610799565b503d610a49565b6040513d84823e3d90fd5b5034610277576020366003190112610277576020906040906001600160a01b03610a9d6116c7565b168152600483522054604051908152f35b50346102775780600319360112610277576020600b54604051908152f35b5034610277576020366003190112610277576020906040906001600160a01b03610af46116c7565b168152600183522054604051908152f35b5034610277576020908160031936011261027757610b216116c7565b90610b306001600c5414611857565b80600c55610b536008546001600160701b0391828216928260701c169160e01c90565b506006546040516370a0823160e01b8082523060048301529094939290916001600160a01b039088908790602490829085165afa95861561026c579088918697610dc0575b50600754169260246040518095819382523060048301525afa918215610230578492610d91575b506001600160701b039283811692610bd78488611de7565b9685841694610be68684611de7565b9789610bf28787611a8b565b978254938415600014610d5d575050610c179250610c1291508990611e77565b611d26565b6103e7198101908111610d475798610c30600054611d80565b6000556000805260018b52610c49604060002054611d80565b6000805260018c52604060002055600080600080516020611efc8339815191528d6040516103e88152a35b8915610cf15790610c8b8a610c90969594936118b7565b61192b565b610cd3575b50604051918252838201527f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f60403392a26001600c55604051908152f35b610ce89060085490808260701c169116611e77565b600b5538610c95565b60405162461bcd60e51b8152600481018c9052602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d3525395115160c21b6064820152608490fd5b634e487b7160e01b600052601160045260246000fd5b610d716107ef916107ef87610d7896611e77565b948c611e77565b905080821015610d8a57505b98610c74565b9050610d84565b9091508681813d8311610db9575b610da9818361172b565b8101031261022457519038610bbf565b503d610d9f565b8281939298503d8311610dea575b610dd8818361172b565b81010312610224578790519538610b98565b503d610dce565b50346102775780600319360112610277576020600a54604051908152f35b50346102775780600319360112610277576020600954604051908152f35b503461027757604036600319011261027757610e476116c7565b610e4f6116dd565b6005546001600160a01b03919082163303610e8d57816bffffffffffffffffffffffff60a01b93168360065416176006551690600754161760075580f35b60405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b6044820152606490fd5b50346102775780600319360112610277576020600354604051908152f35b5034610277578060031936011261027757602060405160128152f35b503461027757806003193601126102775760206040517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98152f35b503461027757606036600319011261027757610f9a610f5b6116c7565b610f636116dd565b6044359160018060a01b038116808652602095600287526040812033600052875260001960406000205403610fa3575b50506117ed565b60405160018152f35b80826040925260028852818120336000528852610fc4868360002054611de7565b92815260028852203360005286526040600020553880610f93565b503461027757806003193601126102775760209054604051908152f35b50346102775780600319360112610277576006546040516001600160a01b039091168152602090f35b5034610277576040366003190112610277576106b76110426116c7565b6024359033611796565b5034610277578060031936011261027757606063ffffffff6110836008546001600160701b0391828216928260701c169160e01c90565b909291604051936001600160701b038092168552166020840152166040820152f35b50346102775780600319360112610277576107016040516110c5816116f3565b600a8152692ab734b9bbb0b8102b1960b11b60208201526040519182918261174d565b5034610277576080366003190112610277576001600160a01b03604435808216900361066f5767ffffffffffffffff6064351161066f5736602360643501121561066f5767ffffffffffffffff606435600401351161066f573660246064356004013560643501011161066f576111636001600c5414611857565b81600c556004351590811580926116bc575b15611669576111996008546001600160701b0391828216928260701c169160e01c90565b506001600160701b03829492166004351080611655575b156116065782600654168360075416928185604435161415806115f8575b156115bb576115a7575b602435611593575b606435600401356114d0575b906020602492604051938480926370a0823160e01b82523060048301525afa918215610628578692611499575b506020602493604051948580926370a0823160e01b82523060048301525afa928315610628578693611465575b5061125c6004356001600160701b038716611d19565b82111561145e5761128161127b6004356001600160701b038816611d19565b83611d19565b945b6001600160701b0382169361129a60243586611d19565b811115611457576112b66112b060243587611d19565b82611d19565b945b871580159061144e575b156113fd576113136113036112e86112d988611e39565b6112e28c611e58565b90611de7565b6112fd6112f486611e39565b6112e28b611e58565b90611e77565b916001600160701b038516611e77565b90620f42409182810292818404811482151715610d47578304036113c1571061138d5761133f9361192b565b60405192835260208301526004356040830152602435606083015260443516907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82260803392a36001600c5580f35b60405162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b6044820152606490fd5b60405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606490fd5b60405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b6064820152608490fd5b508515156112c2565b87946112b8565b8594611283565b9092506020813d602011611491575b816114816020938361172b565b8101031261022457519138611246565b3d9150611474565b9291506020833d6020116114c8575b816114b56020938361172b565b8101031261022457915190916020611219565b3d91506114a8565b83604435163b156104d4576040516304347a1760e21b815233600482015260043560248201526024356044820152608060648201526064356004013560848201526064356004013560246064350160a48301378660a46064356004013583010152868160a481601f19601f60643560040135011681010301818389604435165af1801561066457611562575b506111ec565b67ffffffffffffffff819792971161157f5760405294602061155c565b634e487b7160e01b82526041600452602482fd5b6115a260243560443585611bcc565b6111e0565b6115b660043560443583611bcc565b6111d8565b60405162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b6044820152606490fd5b5083856044351614156111ce565b60405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152605960f81b6064820152608490fd5b506001600160701b038116602435106111b0565b60405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b6064820152608490fd5b506024351515611175565b600435906001600160a01b038216820361022457565b602435906001600160a01b038216820361022457565b6040810190811067ffffffffffffffff82111761047057604052565b6080810190811067ffffffffffffffff82111761047057604052565b90601f8019910116810190811067ffffffffffffffff82111761047057604052565b6020808252825181830181905290939260005b82811061178257505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611760565b909160207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259160018060a01b03809416938460005260028352604060002095169485600052825280604060002055604051908152a3565b90916020600080516020611efc8339815191529160018060a01b038094169360009585875260018452611824836040892054611de7565b868852600185526040882055169485815260406118448382842054611dd2565b91878152600185522055604051908152a3565b1561185e57565b60405162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b6044820152606490fd5b81156118a1570490565b634e487b7160e01b600052601260045260246000fd5b600080516020611efc83398151915260206000926118d6858554611dd2565b845560018060a01b031693848452600182526118f6816040862054611dd2565b858552600183526040852055604051908152a3565b81810292918115918404141715610d4757565b91908201809211610d4757565b916001600160701b03908184111580611a81575b15611a46576008549363ffffffff9460e01c8542160391858311610d47577f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad19660409685941680151580611a3b575b80611a30575b6119d7575b505050607093841b600160701b600160e01b031691169081174260e01b6001600160e01b031916176008819055845191825290921c166020820152a1565b611a2592611a1d926001600160e01b0391611a079190611a0290611a15611a0d878787858789611eae565b611edd565b1661190b565b60095461191e565b600955611eae565b600a5461191e565b600a55388080611999565b508482161515611994565b50848316151561198e565b60405162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b6044820152606490fd5b508183111561193f565b600554604051622fcfcb60e31b815292939291906001600160a01b03906020908490600490829085165afa928315611bc057600093611b82575b508216151593600b549185600014611b715782611ae3575b50505050565b610c12611b0091611b06936001600160701b038091169116611e77565b91611d26565b90818111611b15575b80611add565b611b256000546112fd8484611de7565b90600581029080820460051481151715610d475760058204036113c157611b5592611b4f91611dd2565b90611897565b80611b61575b80611b0f565b611b6a916118b7565b3880611b5b565b50509050611b7b57565b6000600b55565b6020939193813d8211611bb8575b81611b9d6020938361172b565b8101031261066f575190838216820361027757509138611ac5565b3d9150611b90565b6040513d6000823e3d90fd5b9060405192611bda846116f3565b601984527f7472616e7366657228616464726573732c75696e74323536290000000000000060209485015260405163a9059cbb60e01b8186019081526001600160a01b039093166024820152604480820192909252908152611c3b8161170f565b600092839283809351925af1903d15611d12573d67ffffffffffffffff811161157f5760405190611c75601f8201601f191686018361172b565b81523d828583013e5b82611cd2575b505015611c8e5750565b6064906040519062461bcd60e51b82526004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c45440000000000006044820152fd5b8051925082159190848315611cee575b50505090503880611c84565b91938180945001031261066f57820151908115158203610277575080388084611ce2565b6060611c7e565b91908203918211610d4757565b9060006003831115611d7357508160019080821c828101809111610d475791905b848310611d5357505050565b90919350611d6a84611d658184611897565b61191e565b821c9190611d47565b91611d7a57565b60019150565b906103e8820191828111610d47578210611d9657565b60405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606490fd5b9190611dde908361191e565b918210611d9657565b9190611df39083611d19565b918211611dfc57565b60405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606490fd5b906103e89182810292818404811482151715610d47578304036113c157565b90600382029180830460031481151715610d475760038304036113c157565b600092918015918215611e8e575b5050156113c157565b91509250611ea6611e9f848361190b565b9384611897565b143880611e85565b600160701b600160e01b03607082901b16906001600160701b0316808204600160701b1490151715610d475790565b906001600160701b03169081156118a1576001600160e01b0316049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122023f697536f0ba221a647249d20d2f108875f5c2ec8ee876653dde08cafd678d064736f6c63430008130033a2646970667358221220686e8b048c83e03d522012fd9affe8f31509e09b9166462fc0abdbe9b6a0a4a164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}