{
  "address": "0x8D3b7493C7d033BB44F50268f855B77AD0028DA9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Configuration",
          "name": "_config",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "presaleAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "saleAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "PresaleCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPresales",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "getPresale",
      "outputs": [
        {
          "internalType": "contract IPresale",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "getProgress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "isBondingCurveEnd",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "isPending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "presales",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "presalesByPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPresale",
          "name": "presale",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x57909c588424565f1141c53d4f547f4309d5bb9808b116ecc509c96fe3ef2510",
  "receipt": {
    "to": null,
    "from": "0xa5B5bE1ecB74696eC27E3CA89E5d940c9dbcCc56",
    "contractAddress": "0x8D3b7493C7d033BB44F50268f855B77AD0028DA9",
    "transactionIndex": 4,
    "gasUsed": "788652",
    "logsBloom": "0x
    "blockHash": "0x9c087d9b80a547235247233f98e48fcdf9fd7a9bc04f4e4e0dc0bdd7cdf0ad14",
    "transactionHash": "0x57909c588424565f1141c53d4f547f4309d5bb9808b116ecc509c96fe3ef2510",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 15765157,
        "transactionHash": "0x57909c588424565f1141c53d4f547f4309d5bb9808b116ecc509c96fe3ef2510",
        "address": "0x0000000000000000000000000000000000007005",
        "topics": [
          "0x33c981baba081f8fd2c52ac6ad1ea95b6814b4376640f55689051f6584729688",
          "0x000000000000000000000000a5b5be1ecb74696ec27e3ca89e5d940c9dbccc56"
        ],
        "data": "0x0000000000000000000000008d3b7493c7d033bb44f50268f855b77ad0028da9",
        "logIndex": 18,
        "blockHash": "0x9c087d9b80a547235247233f98e48fcdf9fd7a9bc04f4e4e0dc0bdd7cdf0ad14"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 15765157,
        "transactionHash": "0x57909c588424565f1141c53d4f547f4309d5bb9808b116ecc509c96fe3ef2510",
        "address": "0x8D3b7493C7d033BB44F50268f855B77AD0028DA9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a5b5be1ecb74696ec27e3ca89e5d940c9dbccc56"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x9c087d9b80a547235247233f98e48fcdf9fd7a9bc04f4e4e0dc0bdd7cdf0ad14"
      }
    ],
    "blockNumber": 15765157,
    "cumulativeGasUsed": "1154512",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0A35915c7b0cb0f7f33916eEfcC039f0A9bDa0C3"
  ],
  "numDeployments": 4,
  "solcInputHash": "81a7f8e4659dc6e0805a7ecc396f18f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Configuration\",\"name\":\"_config\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"PresaleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPresales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getPresale\",\"outputs\":[{\"internalType\":\"contract IPresale\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isBondingCurveEnd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presalesByPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPresale\",\"name\":\"presale\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/presale-manager/PresaleManager.sol\":\"PresaleManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@kayen/token/contracts/IBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0;\\n\\ninterface IBlacklist {\\n    function isTransferBlacklisted(address target) external view returns (bool);\\n}\",\"keccak256\":\"0xc1d2c827b4b6417be6e296a6ac760b199e9ec78dd1197f86e0f4f11a7922938f\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@kayen/token/contracts/IBlacklist.sol\\\";\\n\\ncontract Configuration is Ownable, IBlacklist {\\n    mapping(address => bool) public paymentTokenWhitlist;\\n    mapping(address => bool) public distributorWhitelist;\\n    mapping(address => bool) public presaleMakers;\\n    mapping(address => bool) public isPoolPaused;\\n    mapping(address => bool) public transferBlacklist;\\n    bool public isAllPoolPaused;\\n\\n    address public feeVault;\\n\\n    uint24 public defaultDistributionFeeRate = 1e6 / 100; // 0.01 = 1%\\n    mapping(address => uint24) public distributionFeeRate;\\n\\n    // amount of payment token as minting fee\\n    uint256 public mintingFee = 0;\\n\\n    uint24 public defaultTradeFee = 1e6 / 100; // 0.01 = 1%\\n    mapping(address => uint24) public tradeFee;\\n\\n    uint24 public maxTreasuryRate = 8e5; // 80%\\n\\n    constructor(address _feeVault) {\\n        feeVault = _feeVault;\\n    }\\n\\n    function putPresaleMaker(address presaleMaker) external onlyOwner {\\n        presaleMakers[presaleMaker] = true;\\n    }\\n\\n    function removePresaleMaker(address presaleMaker) external onlyOwner {\\n        presaleMakers[presaleMaker] = false;\\n    }\\n\\n    function allowTokenForPayment(address token) external onlyOwner {\\n        paymentTokenWhitlist[token] = true;\\n    }\\n\\n    function disallowTokenForPayment(address token) external onlyOwner {\\n        paymentTokenWhitlist[token] = false;\\n    }\\n\\n    function allowDistributor(address distributor) external onlyOwner {\\n        distributorWhitelist[distributor] = true;\\n    }\\n\\n    function disallowDistributor(address distributor) external onlyOwner {\\n        distributorWhitelist[distributor] = false;\\n    }\\n\\n    function isDistributorWhitelisted(address distributor) external view returns (bool) {\\n        return distributorWhitelist[distributor];\\n    }\\n\\n    function putDefaultDistributionFeeRate(uint24 feeRate) external onlyOwner {\\n        defaultDistributionFeeRate = feeRate;\\n    }\\n\\n    function putDistributionFeeRateForToken(address token, uint24 feeRate) external onlyOwner {\\n        distributionFeeRate[token] = feeRate;\\n    }\\n\\n    function getDistributionFeeRate(address token0, address token1) external view returns (uint24) {\\n        uint24 fee0 = distributionFeeRate[token0];\\n        uint24 fee1 = distributionFeeRate[token1];\\n        if(fee0 == 0 && fee1 == 0) {\\n            return defaultDistributionFeeRate;\\n        }\\n        return fee0 > fee1 ? fee0 : fee1;\\n    }\\n\\n    function putFeeVault(address vault) external onlyOwner {\\n        require(vault != address(0), \\\"Configuration: fee vault cannot be zero address\\\");\\n        feeVault = vault;\\n    }\\n\\n    function getFeeVault() external view returns (address) {\\n        return feeVault;\\n    }\\n\\n    function isPaused(address pool) external view returns (bool) {\\n        return isPoolPaused[pool] || isPausedAll();\\n    }\\n\\n    function isPausedAll() public view returns (bool) {\\n        return isAllPoolPaused;\\n    }\\n\\n    function pause(address pool) external onlyOwner {\\n        isPoolPaused[pool] = true;\\n    }\\n\\n    function unpause(address pool) external onlyOwner {\\n        isPoolPaused[pool] = false;\\n    }\\n\\n    function pauseAll() external onlyOwner {\\n        isAllPoolPaused = true;\\n    }\\n\\n    function unpauseAll() external onlyOwner {\\n        isAllPoolPaused = false;\\n    }\\n\\n    function putMintingFee(uint256 fee) external onlyOwner {\\n        mintingFee = fee;\\n    }\\n    \\n    function putDefaultTradeFee(uint24 _tradeFee) external onlyOwner {\\n        assertTradeFee(_tradeFee);\\n        defaultTradeFee = _tradeFee;\\n    }\\n\\n    function putTradeFeeForToken(address token, uint24 _tradeFee) external onlyOwner {\\n        assertTradeFee(_tradeFee);\\n        tradeFee[token] = _tradeFee;\\n    }\\n\\n    function getTradeFee(address token0, address token1) external view returns (uint24) {\\n        uint24 fee0 = tradeFee[token0];\\n        uint24 fee1 = tradeFee[token1];\\n        if(fee0 == 0 && fee1 == 0) {\\n            return defaultTradeFee;\\n        }\\n        return fee0 > fee1 ? fee0 : fee1;\\n    }\\n\\n    function putMaxTreasuryRate(uint24 rate) external onlyOwner {\\n        require(rate <= 1e6, \\\"Configuration: max treasury rate must be less than 1e6\\\");\\n        maxTreasuryRate = rate;\\n    }\\n\\n    function getMaxTreasuryRate() external view returns (uint24) {\\n        return maxTreasuryRate;\\n    }\\n\\n    function assertTradeFee(uint24 _tradeFee) internal view {\\n        // max 2%\\n        require(_tradeFee <= 1e6 / 50, \\\"Configuration: trade fee must be less than 1%\\\");\\n    }\\n\\n    function assertDistributeFee(uint24 _tradeFee) internal view {\\n        // max 2%\\n        require(_tradeFee <= 1e6 / 50, \\\"Configuration: trade fee must be less than 1%\\\");\\n    }\\n\\n    function putTransferBlacklist(address target) external onlyOwner {\\n        transferBlacklist[target] = true;\\n    }\\n\\n    function removeTransferBlacklist(address target) external onlyOwner {\\n        transferBlacklist[target] = false;\\n    }\\n\\n    function isTransferBlacklisted(address target) external view returns (bool) {\\n        return transferBlacklist[target];\\n    }\\n\\n}\",\"keccak256\":\"0xf9ba091eb371665401ec2c10759b57a4ebafdc9c2ea9f5d08813c28f1a910dde\",\"license\":\"GPL-3.0\"},\"contracts/distributor/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\ninterface IDistributor {\\n    function distribute(address token0, address token1, uint256 expectedPriceZeroToOne, bytes calldata data) external;\\n}\",\"keccak256\":\"0x0404bbc92285419f68613c47ed7efd25e073b022b7973afc117430baae806e57\",\"license\":\"GPL-3.0\"},\"contracts/presale-manager/PresaleManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../presale/IPresale.sol\\\";\\nimport \\\"../Configuration.sol\\\";\\n\\ncontract PresaleManager is Ownable {\\n    mapping(address => bool) public isRegistered;\\n    mapping(address => address) public presales;\\n    mapping(address => address) public presalesByPool;\\n    address[] public allPresales;\\n    Configuration config;\\n\\n    constructor(Configuration _config) Ownable() {\\n        config = _config;\\n    }\\n\\n    function register(IPresale presale) external {\\n        require(config.presaleMakers(msg.sender), \\\"PresaleManager: FORBIDDEN\\\");\\n        (address tokenAddress, string memory name, string memory symbol, uint256 totalSupply) = presale.tokenInfo();\\n        require(!isRegistered[tokenAddress], \\\"PresaleManager: ALREADY_REGISTERED\\\");\\n        IPresale.PresaleInfo memory presaleInfo =  presale.info();\\n        presales[tokenAddress] = address(presale);\\n        isRegistered[tokenAddress] = true;\\n        presalesByPool[presaleInfo.pool] = address(presale);\\n        allPresales.push(address(presale));\\n        emit PresaleCreated(\\n            name,\\n            symbol,\\n            tokenAddress,\\n            presaleInfo.paymentToken,\\n            presaleInfo.pool,\\n            presaleInfo.amountToRaise,\\n            totalSupply,\\n            presaleInfo.amountToSale,\\n            presaleInfo.data\\n        );\\n    }\\n\\n    function isPending(address target) external view returns (bool) {\\n        IPresale presale = getPresale(target);\\n        return presale.info().startTimestamp > block.timestamp;\\n    }\\n\\n    function getPresale(address target) public view returns (IPresale) {\\n        if(address(presales[target]) == address(0)) {\\n            return IPresale(presalesByPool[target]);\\n        }\\n        return IPresale(presales[target]);\\n    }\\n\\n    function getProgress(address target) public view returns (uint256) {\\n        return getPresale(target).getProgress();\\n    }\\n\\n    function isBondingCurveEnd(address target) public view returns (bool) {\\n        return getPresale(target).isBondingCurveEnd();\\n    }\\n\\n\\n    event PresaleCreated(\\n        string name,\\n        string symbol,\\n        address token,\\n        address paymentToken,\\n        address pairAddress,\\n        uint256 presaleAmount,\\n        uint256 totalSupply,\\n        uint256 saleAmount,\\n        string data\\n    );\\n}\\n\",\"keccak256\":\"0xa92bebcfc44aae6c1b6248cc3c0c090f75ce2003d00e2b57e350e09be1c10f81\",\"license\":\"GPL-3.0\"},\"contracts/presale/IPresale.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.7;\\n\\nimport {IDistributor} from \\\"../distributor/IDistributor.sol\\\";\\n\\ninterface IPresale {\\n    function tokenInfo() external returns (address, string memory, string memory, uint256);\\n    function getProgress() external view returns (uint256);\\n    function isBondingCurveEnd() external view returns (bool);\\n    function distribute(IDistributor distributor, bytes calldata data) external;\\n    function info() external view returns (PresaleInfo memory);\\n    function isEnd() external view returns (bool);\\n\\n    struct PresaleInfo {\\n        address minter;\\n        address token;\\n        address pool;\\n\\n        address paymentToken;\\n        uint256 amountToRaise;\\n\\n        uint256 amountToSale;\\n        string data;\\n\\n        // 1e6 => 100%;\\n        uint24 toTreasuryRate;\\n\\n        bool isEnd;\\n        uint256 startTimestamp;\\n        bool isNewToken;\\n    }\\n\\n    event Distributed();\\n}\",\"keccak256\":\"0xa2b642b65e4bf1fb60432ccd5f07759f33023829a69586623cb737be3f5e6247\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080346100a757601f610c3a38819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36005541617600555610b7790816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004908136101561001657600080fd5b600092833560e01c9081634420e486146104fd575080635613100614610464578063715018a61461040a57806377ce88eb146103cf5780638da5cb5b146103a7578063a00745b614610312578063a9e1a14a146102d2578063aef7650114610231578063c3c5a547146101f2578063d4ed77b5146101b5578063efcd708f146101745763f2fde38b146100a857600080fd5b34610170576020366003190112610170576001600160a01b0382358181169391929084900361016c576100d96108b9565b831561011a57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b509034610170576020366003190112610170576001600160a01b039035818116908190036101b15783839160209552600285522054169051908152f35b8380fd5b509034610170576020366003190112610170576001600160a01b039035818116908190036101b15783839160209552600385522054169051908152f35b50903461017057602036600319011261017057356001600160a01b0381169081900361017057818360ff92602095526001855220541690519015158152f35b508290346102ce5760209283600319360112610170576001600160a01b038135818116810361016c57906102658692610b02565b168351928380926349ce222b60e11b82525afa9283156102c357809361028e575b505051908152f35b909192508382813d83116102bc575b6102a78183610911565b810103126102b9575051908380610286565b80fd5b503d61029d565b8251903d90823e3d90fd5b5080fd5b5082346102b95760203660031901126102b957823592548310156102b957506102fc60209261086c565b905491519160018060a01b039160031b1c168152f35b50903461017057602036600319011261017057826001600160a01b03823581811681036101705761034290610b02565b16835192838092631b80ac7560e11b82525afa90811561039b5790610120918460209592610378575b5050015190519042108152f35b61039492503d8091833e61038c8183610911565b8101906109e7565b388061036b565b505051903d90823e3d90fd5b8382346102ce57816003193601126102ce57905490516001600160a01b039091168152602090f35b5090346101705760203660031901126101705735916001600160a01b039081841684036102b95750610402602093610b02565b915191168152f35b83346102b957806003193601126102b9576104236108b9565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b508290346102ce5760209283600319360112610170576001600160a01b038135818116810361016c57906104988692610b02565b1683519283809263352b263f60e21b82525afa9283156102c35780936104c3575b5050519015158152f35b909192508382813d83116104f6575b6104dc8183610911565b810103126102b957506104ee90610949565b9083806104b9565b503d6104d2565b9050839134610170576020806003193601126101b1576001600160a01b03853581811694908590036108615782816024818560055416632066bf6d60e21b8252338c8301525afa9081156107e6578691610833575b50156107f0578251636addb66360e01b8152918583888183895af19081156107e6578695879688958994610768575b508416908189526001835260ff878a20541661071a578651631b80ac7560e11b81529489868c81855afa958615610710578a966106f4575b50828a5260028452878a20916bffffffffffffffffffffffff60a01b92818482541617905560018552888b20600160ff1982541617905588870192828451168c5260038652818a8d20918254161790558b54680100000000000000008110156106e157916106a49a999795939161065e847f5907e68cbd0987ce3c33605889d26eb3a84e33833c3ccb79192c00ca73f707319e9f60016106db9d9b999701905561086c565b83829392549160031b92831b921b191617905580606087015116915116916106b060808701519460c060a0890151980151988a51809e819e610120808452830190610add565b92818403910152610add565b978a01526060890152608088015260a087015260c086015260e0850152838203610100850152610add565b0390a180f35b634e487b7160e01b8c5260418d5260248cfd5b6107099196503d808c833e61038c8183610911565b948b6105b9565b88513d8c823e3d90fd5b865162461bcd60e51b8152808b01849052602260248201527f50726573616c654d616e616765723a20414c52454144595f5245474953544552604482015261115160f21b6064820152608490fd5b975050935090503d8087873e61077e8187610911565b8501906080868303126107e2576107948661095b565b93818701519267ffffffffffffffff938481116107de57816107b7918a01610992565b93878901519081116107de576107d286926060928b01610992565b98015193979590610581565b8980fd5b8680fd5b84513d88823e3d90fd5b825162461bcd60e51b8152808701839052601960248201527f50726573616c654d616e616765723a20464f5242494444454e000000000000006044820152606490fd5b90508281813d8311610865575b61084a8183610911565b810103126108615761085b90610949565b87610552565b8580fd5b503d610840565b6004548110156108a35760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633036108cd57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff82111761093357604052565b634e487b7160e01b600052604160045260246000fd5b5190811515820361095657565b600080fd5b51906001600160a01b038216820361095657565b60005b8381106109825750506000910152565b8181015183820152602001610972565b81601f8201121561095657805167ffffffffffffffff811161093357604051926109c6601f8301601f191660200185610911565b81845260208284010111610956576109e4916020808501910161096f565b90565b60208183031261095657805167ffffffffffffffff91828211610956570190610160928383820312610956576040519384018481108382111761093357604052610a308361095b565b8452610a3e6020840161095b565b6020850152610a4f6040840161095b565b6040850152610a606060840161095b565b60608501526080830151608085015260a083015160a085015260c083015191821161095657610a90918301610992565b60c083015260e081015162ffffff811681036109565760e0830152610100610ab9818301610949565b908301526101208082015190830152610ad6610140809201610949565b9082015290565b90602091610af68151809281855285808601910161096f565b601f01601f1916010190565b6001600160a01b03908116600090815260026020526040902054811615610b325760026020526040600020541690565b6003602052604060002054169056fea2646970667358221220c10fd29b5313d1c3fb287c7d7cf24545c7ea399b6b06791faa0f31ac5d6e43da64736f6c63430008130033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c9081634420e486146104fd575080635613100614610464578063715018a61461040a57806377ce88eb146103cf5780638da5cb5b146103a7578063a00745b614610312578063a9e1a14a146102d2578063aef7650114610231578063c3c5a547146101f2578063d4ed77b5146101b5578063efcd708f146101745763f2fde38b146100a857600080fd5b34610170576020366003190112610170576001600160a01b0382358181169391929084900361016c576100d96108b9565b831561011a57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b509034610170576020366003190112610170576001600160a01b039035818116908190036101b15783839160209552600285522054169051908152f35b8380fd5b509034610170576020366003190112610170576001600160a01b039035818116908190036101b15783839160209552600385522054169051908152f35b50903461017057602036600319011261017057356001600160a01b0381169081900361017057818360ff92602095526001855220541690519015158152f35b508290346102ce5760209283600319360112610170576001600160a01b038135818116810361016c57906102658692610b02565b168351928380926349ce222b60e11b82525afa9283156102c357809361028e575b505051908152f35b909192508382813d83116102bc575b6102a78183610911565b810103126102b9575051908380610286565b80fd5b503d61029d565b8251903d90823e3d90fd5b5080fd5b5082346102b95760203660031901126102b957823592548310156102b957506102fc60209261086c565b905491519160018060a01b039160031b1c168152f35b50903461017057602036600319011261017057826001600160a01b03823581811681036101705761034290610b02565b16835192838092631b80ac7560e11b82525afa90811561039b5790610120918460209592610378575b5050015190519042108152f35b61039492503d8091833e61038c8183610911565b8101906109e7565b388061036b565b505051903d90823e3d90fd5b8382346102ce57816003193601126102ce57905490516001600160a01b039091168152602090f35b5090346101705760203660031901126101705735916001600160a01b039081841684036102b95750610402602093610b02565b915191168152f35b83346102b957806003193601126102b9576104236108b9565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b508290346102ce5760209283600319360112610170576001600160a01b038135818116810361016c57906104988692610b02565b1683519283809263352b263f60e21b82525afa9283156102c35780936104c3575b5050519015158152f35b909192508382813d83116104f6575b6104dc8183610911565b810103126102b957506104ee90610949565b9083806104b9565b503d6104d2565b9050839134610170576020806003193601126101b1576001600160a01b03853581811694908590036108615782816024818560055416632066bf6d60e21b8252338c8301525afa9081156107e6578691610833575b50156107f0578251636addb66360e01b8152918583888183895af19081156107e6578695879688958994610768575b508416908189526001835260ff878a20541661071a578651631b80ac7560e11b81529489868c81855afa958615610710578a966106f4575b50828a5260028452878a20916bffffffffffffffffffffffff60a01b92818482541617905560018552888b20600160ff1982541617905588870192828451168c5260038652818a8d20918254161790558b54680100000000000000008110156106e157916106a49a999795939161065e847f5907e68cbd0987ce3c33605889d26eb3a84e33833c3ccb79192c00ca73f707319e9f60016106db9d9b999701905561086c565b83829392549160031b92831b921b191617905580606087015116915116916106b060808701519460c060a0890151980151988a51809e819e610120808452830190610add565b92818403910152610add565b978a01526060890152608088015260a087015260c086015260e0850152838203610100850152610add565b0390a180f35b634e487b7160e01b8c5260418d5260248cfd5b6107099196503d808c833e61038c8183610911565b948b6105b9565b88513d8c823e3d90fd5b865162461bcd60e51b8152808b01849052602260248201527f50726573616c654d616e616765723a20414c52454144595f5245474953544552604482015261115160f21b6064820152608490fd5b975050935090503d8087873e61077e8187610911565b8501906080868303126107e2576107948661095b565b93818701519267ffffffffffffffff938481116107de57816107b7918a01610992565b93878901519081116107de576107d286926060928b01610992565b98015193979590610581565b8980fd5b8680fd5b84513d88823e3d90fd5b825162461bcd60e51b8152808701839052601960248201527f50726573616c654d616e616765723a20464f5242494444454e000000000000006044820152606490fd5b90508281813d8311610865575b61084a8183610911565b810103126108615761085b90610949565b87610552565b8580fd5b503d610840565b6004548110156108a35760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633036108cd57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff82111761093357604052565b634e487b7160e01b600052604160045260246000fd5b5190811515820361095657565b600080fd5b51906001600160a01b038216820361095657565b60005b8381106109825750506000910152565b8181015183820152602001610972565b81601f8201121561095657805167ffffffffffffffff811161093357604051926109c6601f8301601f191660200185610911565b81845260208284010111610956576109e4916020808501910161096f565b90565b60208183031261095657805167ffffffffffffffff91828211610956570190610160928383820312610956576040519384018481108382111761093357604052610a308361095b565b8452610a3e6020840161095b565b6020850152610a4f6040840161095b565b6040850152610a606060840161095b565b60608501526080830151608085015260a083015160a085015260c083015191821161095657610a90918301610992565b60c083015260e081015162ffffff811681036109565760e0830152610100610ab9818301610949565b908301526101208082015190830152610ad6610140809201610949565b9082015290565b90602091610af68151809281855285808601910161096f565b601f01601f1916010190565b6001600160a01b03908116600090815260026020526040902054811615610b325760026020526040600020541690565b6003602052604060002054169056fea2646970667358221220c10fd29b5313d1c3fb287c7d7cf24545c7ea399b6b06791faa0f31ac5d6e43da64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7383,
        "contract": "contracts/presale-manager/PresaleManager.sol:PresaleManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10160,
        "contract": "contracts/presale-manager/PresaleManager.sol:PresaleManager",
        "label": "isRegistered",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10164,
        "contract": "contracts/presale-manager/PresaleManager.sol:PresaleManager",
        "label": "presales",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10168,
        "contract": "contracts/presale-manager/PresaleManager.sol:PresaleManager",
        "label": "presalesByPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10171,
        "contract": "contracts/presale-manager/PresaleManager.sol:PresaleManager",
        "label": "allPresales",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10174,
        "contract": "contracts/presale-manager/PresaleManager.sol:PresaleManager",
        "label": "config",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(Configuration)9964"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Configuration)9964": {
        "encoding": "inplace",
        "label": "contract Configuration",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}